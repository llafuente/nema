"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Parameter_1 = require("../Parameter");
const fs = require("fs");
const path = require("path");
const CommonGenerator = require("./CommonGenerator");
const TypescriptFile_1 = require("../TypescriptFile");
function mkdirSafe(folder) {
    try {
        fs.mkdirSync(folder);
    }
    catch (e) {
        if (e.code != "EEXIST")
            throw e;
    }
}
class Express {
    constructor(dstPath) {
        this.dstPath = dstPath;
    }
    generate(api, lint) {
        api.sort();
        // create generation paths
        mkdirSafe(path.join(this.dstPath));
        mkdirSafe(path.join(this.dstPath, "src"));
        mkdirSafe(path.join(this.dstPath, "src/models"));
        mkdirSafe(path.join(this.dstPath, "src/mongoose"));
        mkdirSafe(path.join(this.dstPath, "src/routes"));
        mkdirSafe(path.join(this.dstPath, "test"));
        // generate all models
        CommonGenerator.models(api, this.dstPath);
        // copy raw files (those that don't need to be generated)
        CommonGenerator.copyCommonTemplates(this.dstPath);
        fs.copyFileSync(path.join(process.cwd(), "templates", "node-express", ".gitignore"), path.join(this.dstPath, ".gitignore"));
        fs.copyFileSync(path.join(process.cwd(), "templates", "node-express", "nodemon.json"), path.join(this.dstPath, "nodemon.json"));
        fs.copyFileSync(path.join(process.cwd(), "templates", "node-express", "package.json"), path.join(this.dstPath, "package.json"));
        fs.copyFileSync(path.join(process.cwd(), "templates", "node-express", "tsconfig.json"), path.join(this.dstPath, "tsconfig.json"));
        this.routesFile(api, "./src/routes.ts");
        api.eachMethod((method, name) => {
            this.routeFile(api, method, `./src/routes/${method.operationId}.ts`);
            this.routeTestFile(api, method, `./test/${method.operationId}.test.ts`);
        });
        this.indexFile(api, "./src/index.ts");
        CommonGenerator.pretty(this.dstPath);
        // this may take a long time...
        if (lint) {
            CommonGenerator.lint(this.dstPath);
        }
    }
    header(api) {
        return "// DO NOT EDIT THIS FILE\n";
    }
    templates(dstPath) {
        ["Cast.ts", "CommonException.ts", "Random.ts"].forEach((filename) => {
            fs.copyFileSync(path.join(process.cwd(), "templates", "node-express", filename), path.join(this.dstPath, filename));
        });
    }
    indexFile(api, filename) {
        CommonGenerator.writeModificableTemplate(path.join(this.dstPath, filename), this.index(api));
    }
    routesFile(api, filename) {
        fs.writeFileSync(path.join(this.dstPath, filename), this.routes(api));
    }
    routeFile(api, method, filename) {
        CommonGenerator.writeModificableTemplate(path.join(this.dstPath, filename), this.route(api, method));
    }
    routeTestFile(api, method, filename) {
        if (fs.existsSync(path.join(this.dstPath, filename))) {
            console.log("file exist: ${filename}");
            fs.writeFileSync(path.join(this.dstPath, filename), this.routeTest(api, method, filename));
        }
    }
    routes(api) {
        const imports = [];
        const s = [];
        imports.push(`import * as express from "express";`);
        api.eachMethod((method, operationId) => {
            imports.push(`import { ${method.operationId}Route } from "./routes/${method.operationId}";`);
            s.push(`r.${method.verb.toLowerCase()}(${JSON.stringify(method.url.replace(/{/g, ":").replace(/}/g, ""))}, ${method.operationId}Route);`);
        });
        return `${imports.join("\n")}

export function routes(app: express.Application) {
  const r: express.Router = express.Router();
  app.use(${JSON.stringify(api.basePath)}, r);

  ${s.join("\n")}
}
`;
    }
    route(api, method) {
        const getParams = ["req", "res", "next"];
        const params = [];
        let imports = [];
        method.eachParam((p) => {
            params.push(`${p.name}: ${p.type.toTypeScriptType()}`);
            if (!p.type.isPrimitive()) {
                imports.push(`import { ${p.type.toBaseType()} } from "../models/${p.type.toBaseType()}";`);
            }
            switch (p.in) {
                case Parameter_1.ParameterType.BODY:
                    getParams.push(p.type.getParser(`req.body`));
                    break;
                case Parameter_1.ParameterType.COOKIE:
                    getParams.push(p.type.getParser(`req.cookies.${p.name} || null`));
                    break;
                case Parameter_1.ParameterType.HEADER:
                    getParams.push(p.type.getParser(`req.header(${JSON.stringify(p.name)})`));
                    break;
                case Parameter_1.ParameterType.PATH:
                    getParams.push(p.type.getParser(`req.param(${JSON.stringify(p.name)})`));
                    break;
                case Parameter_1.ParameterType.QUERY:
                    getParams.push(p.type.getParser(`req.query.${p.name} || null`));
                    break;
            }
        });
        imports = imports.filter((value, index, self) => {
            return self.indexOf(value) === index;
        });
        return {
            tokens: ["custom-imports", "method-body", "extras"],
            template: `import * as express from "express";
import { Request, Response } from "../";
import { Cast } from "../Cast";
${imports.join("\n")}

// this zones are safe to edit
//<custom-imports>
//</custom-imports>
export function ${method.operationId}Route(req: Request, res: Response, next: express.NextFunction) {
  ${method.operationId}(${getParams.join(", ")});
}
export function ${method.operationId}(req: Request, res: Response, next: express.NextFunction, ${params.join(", ")}) {
//<method-body>
//</method-body>
}
//<extras>
//</extras>
`
        };
    }
    routeTest(api, method, filename) {
        const ts = new TypescriptFile_1.TypescriptFile();
        ts.rawImports =
            `process.env.NODE_ENV = "test";

import test from "ava";
import { app } from "../src/";
import { Random } from "../src/Random";
import * as supertest from "supertest";
import * as qs from "qs";`;
        const query = [];
        method.eachQueryParam((p) => {
            query.push(`${JSON.stringify(p.name)}: ${p.type.getRandom(ts)}`);
        });
        ts.push(`
test.cb.serial("${method.operationId}", (t) => {

  supertest(app)
  .${method.verb}(${JSON.stringify(path.posix.join(method.api.basePath, method.url))} + "?" + qs.stringify({${query.join(",\n")}}))
`);
        method.eachHeaderParam((p) => {
            ts.push(`.set(${JSON.stringify(p.headerName)}, "xxx")`);
        }, false);
        method.eachBodyParam((p) => {
            ts.push(`.send(${p.type.getRandom(ts)})`);
        });
        switch (method.verb) {
            case "get":
                break;
            case "post":
            case "put":
            case "patch":
                ts.push(`
          .send({
            userlogin: "admin",
            password: "admin",
          })
        `);
                break;
        }
        if (method.consumes.length) {
            ts.push(`.set("Content-Type", ${JSON.stringify(method.consumes.join(", "))})`);
        }
        ts.push(`.set("Accept", ${JSON.stringify(method.getAccept())})
.expect(${method.getSuccessResponse().httpCode})
.end(function(err: Error, response) {
  if (err) {
    t.fail(err.message);
  }
    t.pass();
    t.end();
  });
});
`);
        return ts.toString(filename);
    }
    index(api) {
        return {
            tokens: ["express-configuration", "request", "response"],
            template: `import * as express from "express";
import * as path from "path";
import * as bodyParser from "body-parser";
import { CommonException } from "./CommonException";
import { NotFound } from "./Errors";

const cors = require("cors");
const morgan = require("morgan");

import { routes } from "./routes";

// nodemon kill
process.on("SIGUSR2", () => {
  process.exit(0);
});

export const app = express();
//<express-configuration>
app.set("mongodb", process.env.MONGO_URI || "mongodb://127.0.0.1:27017/test");

// false to disable
app.set("cors", {
  origin: "http://localhost:3003",
  credentials: true,
})
//</express-configuration>

// declare our own interface for request to save our variables
export class Upload {
  fieldname: string;
  originalname: string;
  encoding: string;
  mimetype: string;
  size: string;
  destination: string;
  filename: string;
  path: string;
  buffer: string;
}

export interface Request extends express.Request {
  file: Upload;
  files: { [s: string]: Upload };
  //<request>
  //</request>
}

export interface Response extends express.Response {
  //<response>
  //</response>
}

const mongoose = require("mongoose");
mongoose.Promise = require("bluebird");
mongoose.set("debug", true);

mongoose.connect(
  app.get("mongodb"),
  {
    promiseLibrary: require("bluebird"),
  },
  function(err) {
    if (err) {
      throw err;
    }

    console.log("connected to mongodb:", app.get("mongodb"));
  },
);

app.use(morgan("tiny"));
if (app.get("cors")) {
  app.use(
    cors(app.get("cors")),
  );
}

// use query json body parser
app.use(bodyParser.json());
// use query string parser
app.use(
  bodyParser.urlencoded({
    extended: true,
  }),
);

routes(app);

app.use((req: Request, res: express.Response, next: express.NextFunction) => {
  res.status(404).json(new CommonException(404, "not-found", "Not found", null, null, Date.now()));
});

app.use((err: Error, req: Request, res: express.Response, next: express.NextFunction) => {
  console.error("Error handler: ", err);

  if (err instanceof NotFound) {
    res.status(404).json(new CommonException(404, "not-found", "Not found", null, null, Date.now()));
  }

  if (!(err instanceof CommonException)) {
    console.warn("Unhandled error thrown", err);
  }

  res.status(404).json(err);
});

if (process.env.NODE_ENV !== "test") {
  const port: number = process.env.PORT ? parseInt(process.env.PORT, 10) : 8080;
  console.log("listening at: 0.0.0.0:" + port);
  app.listen(port, "0.0.0.0");
}
`
        };
    }
}
exports.Express = Express;
//# sourceMappingURL=Express.js.map