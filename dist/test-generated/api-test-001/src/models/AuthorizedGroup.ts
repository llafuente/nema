// DO NOT EDIT THIS FILE

import { Cast } from "../Cast";
import { Random } from "../Random";
export interface IAuthorizedGroup {
  groupId: string;
  groupName: string;
  users: string[];
}
export class AuthorizedGroup implements IAuthorizedGroup {
  groupId: string;
  groupName: string;
  users: string[];
  constructor(groupId: string, groupName: string, users: string[]) {
    this.groupId = groupId;
    this.groupName = groupName;
    this.users = users;
  }

  static parse(json: any): AuthorizedGroup {
    if (json == null) {
      return AuthorizedGroup.emptyInstance();
    }

    return new AuthorizedGroup(
      Cast.string(json.groupId),
      Cast.string(json.groupName),
      (json.users || []).map(x => Cast.string(x))
    );
  }

  static randomInstance(): AuthorizedGroup {
    return new AuthorizedGroup(Random.string(), Random.string(), [
      Random.string(),
      Random.string()
    ]);
  }

  static emptyInstance(): AuthorizedGroup {
    return new AuthorizedGroup(null, null, []);
  }

  getGroupId(): string {
    return this.groupId;
  }
  setGroupId($value: string) {
    this.groupId = $value;
  }

  getGroupName(): string {
    return this.groupName;
  }
  setGroupName($value: string) {
    this.groupName = $value;
  }

  getUsers(): string[] {
    return this.users;
  }
  setUsers($value: string[]) {
    this.users = $value;
  }
}
