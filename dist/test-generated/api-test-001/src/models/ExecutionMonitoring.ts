// DO NOT EDIT THIS FILE

import { MonitoringDto } from "./MonitoringDto";
import { Cast } from "../Cast";
import { Random } from "../Random";
export interface IExecutionMonitoring {
  status: string;
  leavesQty: number;
  cumQty: number;
  typeExecution: string;
  lastQty: number;
}
export class ExecutionMonitoring extends MonitoringDto
  implements IExecutionMonitoring {
  status: string;
  leavesQty: number;
  cumQty: number;
  typeExecution: string;
  lastQty: number;
  constructor(
    strategyId: string,
    clOrderId: string,
    origClOrderId: string,
    orderId: string,
    side: string,
    instrument: string,
    price: number,
    startAt: number,
    endAt: number,
    status: string,
    leavesQty: number,
    cumQty: number,
    typeExecution: string,
    lastQty: number
  ) {
    super(
      strategyId,
      clOrderId,
      origClOrderId,
      orderId,
      side,
      instrument,
      price,
      startAt,
      endAt
    );
    this.status = status;
    this.leavesQty = leavesQty;
    this.cumQty = cumQty;
    this.typeExecution = typeExecution;
    this.lastQty = lastQty;
  }

  static parse(json: any): ExecutionMonitoring {
    if (json == null) {
      return ExecutionMonitoring.emptyInstance();
    }

    return new ExecutionMonitoring(
      Cast.string(json.strategyId),
      Cast.string(json.clOrderId),
      Cast.string(json.origClOrderId),
      Cast.string(json.orderId),
      Cast.string(json.side),
      Cast.string(json.instrument),
      Cast.number(json.price),
      Cast.number(json.startAt),
      Cast.number(json.endAt),
      Cast.string(json.status),
      Cast.number(json.leavesQty),
      Cast.number(json.cumQty),
      Cast.string(json.typeExecution),
      Cast.number(json.lastQty)
    );
  }

  static randomInstance(): ExecutionMonitoring {
    return new ExecutionMonitoring(
      Random.string(),
      Random.string(),
      Random.string(),
      Random.string(),
      Random.string(),
      Random.string(),
      Random.number(),
      Random.number(),
      Random.number(),
      Random.string(),
      Random.number(),
      Random.number(),
      Random.string(),
      Random.number()
    );
  }

  static emptyInstance(): ExecutionMonitoring {
    return new ExecutionMonitoring(
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null
    );
  }

  getStatus(): string {
    return this.status;
  }
  setStatus($value: string) {
    this.status = $value;
  }

  getLeavesQty(): number {
    return this.leavesQty;
  }
  setLeavesQty($value: number) {
    this.leavesQty = $value;
  }

  getCumQty(): number {
    return this.cumQty;
  }
  setCumQty($value: number) {
    this.cumQty = $value;
  }

  getTypeExecution(): string {
    return this.typeExecution;
  }
  setTypeExecution($value: string) {
    this.typeExecution = $value;
  }

  getLastQty(): number {
    return this.lastQty;
  }
  setLastQty($value: number) {
    this.lastQty = $value;
  }
}
