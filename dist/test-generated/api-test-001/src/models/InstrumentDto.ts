// DO NOT EDIT THIS FILE

import { Cast } from "../Cast";
import { Random } from "../Random";
export interface IInstrumentDto {
  nameInstrument: string;
  description: string;
  type: string;
  typeInstrument: string;
  maturity: string;
  marketId: string;
  startAt: number;
  stopAt: number;
  authorizedGroup: string;
  initTime: string;
  endTime: string;
  timeZone: string;
}
export class InstrumentDto implements IInstrumentDto {
  nameInstrument: string;
  description: string;
  type: string;
  typeInstrument: string;
  maturity: string;
  marketId: string;
  startAt: number;
  stopAt: number;
  authorizedGroup: string;
  initTime: string;
  endTime: string;
  timeZone: string;
  constructor(
    nameInstrument: string,
    description: string,
    type: string,
    typeInstrument: string,
    maturity: string,
    marketId: string,
    startAt: number,
    stopAt: number,
    authorizedGroup: string,
    initTime: string,
    endTime: string,
    timeZone: string
  ) {
    this.nameInstrument = nameInstrument;
    this.description = description;
    this.type = type;
    this.typeInstrument = typeInstrument;
    this.maturity = maturity;
    this.marketId = marketId;
    this.startAt = startAt;
    this.stopAt = stopAt;
    this.authorizedGroup = authorizedGroup;
    this.initTime = initTime;
    this.endTime = endTime;
    this.timeZone = timeZone;
  }

  static parse(json: any): InstrumentDto {
    if (json == null) {
      return InstrumentDto.emptyInstance();
    }

    return new InstrumentDto(
      Cast.string(json.nameInstrument),
      Cast.string(json.description),
      Cast.string(json.type),
      Cast.string(json.typeInstrument),
      Cast.string(json.maturity),
      Cast.string(json.marketId),
      Cast.number(json.startAt),
      Cast.number(json.stopAt),
      Cast.string(json.authorizedGroup),
      Cast.string(json.initTime),
      Cast.string(json.endTime),
      Cast.string(json.timeZone)
    );
  }

  static randomInstance(): InstrumentDto {
    return new InstrumentDto(
      Random.string(),
      Random.string(),
      Random.string(),
      Random.string(),
      Random.string(),
      Random.string(),
      Random.number(),
      Random.number(),
      Random.string(),
      Random.string(),
      Random.string(),
      Random.string()
    );
  }

  static emptyInstance(): InstrumentDto {
    return new InstrumentDto(
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null
    );
  }

  getNameInstrument(): string {
    return this.nameInstrument;
  }
  setNameInstrument($value: string) {
    this.nameInstrument = $value;
  }

  getDescription(): string {
    return this.description;
  }
  setDescription($value: string) {
    this.description = $value;
  }

  getType(): string {
    return this.type;
  }
  setType($value: string) {
    this.type = $value;
  }

  getTypeInstrument(): string {
    return this.typeInstrument;
  }
  setTypeInstrument($value: string) {
    this.typeInstrument = $value;
  }

  getMaturity(): string {
    return this.maturity;
  }
  setMaturity($value: string) {
    this.maturity = $value;
  }

  getMarketId(): string {
    return this.marketId;
  }
  setMarketId($value: string) {
    this.marketId = $value;
  }

  getStartAt(): number {
    return this.startAt;
  }
  setStartAt($value: number) {
    this.startAt = $value;
  }

  getStopAt(): number {
    return this.stopAt;
  }
  setStopAt($value: number) {
    this.stopAt = $value;
  }

  getAuthorizedGroup(): string {
    return this.authorizedGroup;
  }
  setAuthorizedGroup($value: string) {
    this.authorizedGroup = $value;
  }

  getInitTime(): string {
    return this.initTime;
  }
  setInitTime($value: string) {
    this.initTime = $value;
  }

  getEndTime(): string {
    return this.endTime;
  }
  setEndTime($value: string) {
    this.endTime = $value;
  }

  getTimeZone(): string {
    return this.timeZone;
  }
  setTimeZone($value: string) {
    this.timeZone = $value;
  }
}
