// DO NOT EDIT THIS FILE

import { Cast } from "../Cast";
import { Random } from "../Random";
export interface IParameterChangedMessage {
  strategyId: string;
  parameterName: string;
  value: string;
}
export class ParameterChangedMessage implements IParameterChangedMessage {
  strategyId: string;
  parameterName: string;
  value: string;
  constructor(strategyId: string, parameterName: string, value: string) {
    this.strategyId = strategyId;
    this.parameterName = parameterName;
    this.value = value;
  }

  static parse(json: any): ParameterChangedMessage {
    if (json == null) {
      return ParameterChangedMessage.emptyInstance();
    }

    return new ParameterChangedMessage(
      Cast.string(json.strategyId),
      Cast.string(json.parameterName),
      Cast.string(json.value)
    );
  }

  static randomInstance(): ParameterChangedMessage {
    return new ParameterChangedMessage(
      Random.string(),
      Random.string(),
      Random.string()
    );
  }

  static emptyInstance(): ParameterChangedMessage {
    return new ParameterChangedMessage(null, null, null);
  }

  getStrategyId(): string {
    return this.strategyId;
  }
  setStrategyId($value: string) {
    this.strategyId = $value;
  }

  getParameterName(): string {
    return this.parameterName;
  }
  setParameterName($value: string) {
    this.parameterName = $value;
  }

  getValue(): string {
    return this.value;
  }
  setValue($value: string) {
    this.value = $value;
  }
}
