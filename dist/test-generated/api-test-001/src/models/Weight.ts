// DO NOT EDIT THIS FILE

import { Cast } from "../Cast";
import { Random } from "../Random";
import { InstrumentDto } from "./InstrumentDto";
import { Strategy } from "./Strategy";
export interface IWeight {
  weightId: string;
  instrument: InstrumentDto;
  factor: number;
  weight: number;
  hedgeWeight: number;
  hedgeInstrument: InstrumentDto;
  kind: string;
  limitUp: number;
  limitDown: number;
  strategy: string;
  limitStrategies: Strategy[];
}
export class Weight implements IWeight {
  weightId: string;
  instrument: InstrumentDto;
  factor: number;
  weight: number;
  hedgeWeight: number;
  hedgeInstrument: InstrumentDto;
  kind: string;
  limitUp: number;
  limitDown: number;
  strategy: string;
  limitStrategies: Strategy[];
  constructor(
    weightId: string,
    instrument: InstrumentDto,
    factor: number,
    weight: number,
    hedgeWeight: number,
    hedgeInstrument: InstrumentDto,
    kind: string,
    limitUp: number,
    limitDown: number,
    strategy: string,
    limitStrategies: Strategy[]
  ) {
    this.weightId = weightId;
    this.instrument = instrument;
    this.factor = factor;
    this.weight = weight;
    this.hedgeWeight = hedgeWeight;
    this.hedgeInstrument = hedgeInstrument;
    this.kind = kind;
    this.limitUp = limitUp;
    this.limitDown = limitDown;
    this.strategy = strategy;
    this.limitStrategies = limitStrategies;
  }

  static parse(json: any): Weight {
    if (json == null) {
      return Weight.emptyInstance();
    }

    return new Weight(
      Cast.string(json.weightId),
      InstrumentDto.parse(json.instrument),
      Cast.number(json.factor),
      Cast.number(json.weight),
      Cast.number(json.hedgeWeight),
      InstrumentDto.parse(json.hedgeInstrument),
      Cast.string(json.kind),
      Cast.number(json.limitUp),
      Cast.number(json.limitDown),
      Cast.string(json.strategy),
      (json.limitStrategies || []).map(x => Strategy.parse(x))
    );
  }

  static randomInstance(): Weight {
    return new Weight(
      Random.string(),
      InstrumentDto.randomInstance(),
      Random.number(),
      Random.number(),
      Random.number(),
      InstrumentDto.randomInstance(),
      Random.string(),
      Random.number(),
      Random.number(),
      Random.string(),
      [Strategy.randomInstance(), Strategy.randomInstance()]
    );
  }

  static emptyInstance(): Weight {
    return new Weight(
      null,
      InstrumentDto.emptyInstance(),
      null,
      null,
      null,
      InstrumentDto.emptyInstance(),
      null,
      null,
      null,
      null,
      []
    );
  }

  getWeightId(): string {
    return this.weightId;
  }
  setWeightId($value: string) {
    this.weightId = $value;
  }

  getInstrument(): InstrumentDto {
    return this.instrument;
  }
  setInstrument($value: InstrumentDto) {
    this.instrument = $value;
  }

  getFactor(): number {
    return this.factor;
  }
  setFactor($value: number) {
    this.factor = $value;
  }

  getWeight(): number {
    return this.weight;
  }
  setWeight($value: number) {
    this.weight = $value;
  }

  getHedgeWeight(): number {
    return this.hedgeWeight;
  }
  setHedgeWeight($value: number) {
    this.hedgeWeight = $value;
  }

  getHedgeInstrument(): InstrumentDto {
    return this.hedgeInstrument;
  }
  setHedgeInstrument($value: InstrumentDto) {
    this.hedgeInstrument = $value;
  }

  getKind(): string {
    return this.kind;
  }
  setKind($value: string) {
    this.kind = $value;
  }

  getLimitUp(): number {
    return this.limitUp;
  }
  setLimitUp($value: number) {
    this.limitUp = $value;
  }

  getLimitDown(): number {
    return this.limitDown;
  }
  setLimitDown($value: number) {
    this.limitDown = $value;
  }

  getStrategy(): string {
    return this.strategy;
  }
  setStrategy($value: string) {
    this.strategy = $value;
  }

  getLimitStrategies(): Strategy[] {
    return this.limitStrategies;
  }
  setLimitStrategies($value: Strategy[]) {
    this.limitStrategies = $value;
  }
}
