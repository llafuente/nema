import { Api } from "../Api";
import { Model } from "../Model";
import { Method } from "../Method";
import { Type } from "../Type";
import { Parameter, ParameterType } from "../Parameter";
import * as _ from "lodash";
import * as fs from "fs";
import * as path from "path";
import { Angular5Client } from "./Angular5Client";
import * as CommonGenerator from "./CommonGenerator";

function mkdirSafe(folder) {
  try {
    fs.mkdirSync(folder);
  } catch (e) {
    if (e.code != "EEXIST") throw e;
  }
}

export class Mongoose {

  static generate(api: Api, dstPath: string, lint: boolean) {
    api.sort();

    // create generation paths
    mkdirSafe(path.join(dstPath));
    mkdirSafe(path.join(dstPath, "src"));
    mkdirSafe(path.join(dstPath, "src/models"));
    mkdirSafe(path.join(dstPath, "src/mongoose"));
    mkdirSafe(path.join(dstPath, "src/routes"));

    // generate all models
    CommonGenerator.models(api, dstPath);

    api.eachModel((model, modelName) => {
      Mongoose.mongooseModelFile(api, model, path.join(dstPath, `src/mongoose/${modelName}.ts`));
    });

    // copy raw files (those that don't need to be generated)
    CommonGenerator.copyCommonTemplates(dstPath);
    fs.copyFileSync(path.join(process.cwd(), "templates", "node-express", "tsconfig.json"), path.join(dstPath, "tsconfig.json"));
/*
    Angular5Client.apiFile(api, path.join(dstPath, `src/${api.apiName}.ts`));

    Angular5Client.moduleFile(api, path.join(dstPath, `index.ts`));

    Angular5Client.packageJSONFile(api, path.join(dstPath, `package.json`));

*/
    CommonGenerator.pretty(dstPath);
    // this may take a long time...
    if (lint) {
      CommonGenerator.lint(dstPath);
    }
  }

  static header(api: Api) {
    return "// DO NOT EDIT THIS FILE\n"
  }

  static templates(dstPath: string) {
    ["Cast.ts", "CommonException.ts", "Random.ts"].forEach((filename) => {
      fs.copyFileSync(path.join(process.cwd(), "templates", "node-express", filename), path.join(dstPath, filename));
    })
  }

  static mongooseModelFile(api: Api, model: Model, filename: string) {
    fs.writeFileSync(filename, Mongoose.mongooseModel(api, model));
  }

  static packageJSONFile(api: Api, filename: string) {
    fs.writeFileSync(filename, Mongoose.packageJSON(api));
  }

  static mongooseModel(api: Api, model: Model): string {
    const s = [];
    s.push(`import { ${model.interfaceName} } from "../models/${model.name}";`);
    s.push(`import * as mongoose from "mongoose";`);
    s.push(`
export interface ${model.mongooseInterface} extends ${model.interfaceName}, mongoose.Document {}

export const ${model.mongooseSchema} = new mongoose.Schema(
  {`);

    if (model.extends) {
      model.eachParentProperty((t, name) => {
        s.push(`${name}: ${t.toMongooseType()},`);
      });
    }
    model.eachProperty((t, name) => {
      s.push(`${name}: ${t.toMongooseType()},`);
    });

  s.push(`
  },
  {
    collection: ${JSON.stringify(model.mongooseCollection)},
  },
);

export const ${model.mongooseModel} = mongoose.model<${model.mongooseInterface}>("Role", ${model.mongooseSchema});
`);
    return s.join("\n");
  }


  static packageJSON(api: Api) {
    return JSON.stringify({
      "name": api.angularClientNodeModuleName,
      "version": api.version,
      "description": api.description,
      "author": {
        "name": api.authorName,
        "email": api.authorEmail,
        "url": api.authorURL,
      },
      "peerDependencies": {
        "@angular/core": ">=5.2.0",
        "typescript": "*"
      },
      "main": "./index.ts"
    }, null, 2)

  }
}
