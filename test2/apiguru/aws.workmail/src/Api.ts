// DO NOT EDIT THIS FILE

import { CommonException } from "./CommonException";
import { RequestOptions } from "./RequestOptions";
import { Aliases } from "./models/Aliases";
import { AssociateDelegateToResourceRequest } from "./models/AssociateDelegateToResourceRequest";
import { AssociateDelegateToResourceResponse } from "./models/AssociateDelegateToResourceResponse";
import { AssociateMemberToGroupRequest } from "./models/AssociateMemberToGroupRequest";
import { AssociateMemberToGroupResponse } from "./models/AssociateMemberToGroupResponse";
import { BookingOptions } from "./models/BookingOptions";
import { Boolean } from "./models/Boolean";
import { CreateAliasRequest } from "./models/CreateAliasRequest";
import { CreateAliasResponse } from "./models/CreateAliasResponse";
import { CreateGroupRequest } from "./models/CreateGroupRequest";
import { CreateGroupResponse } from "./models/CreateGroupResponse";
import { CreateResourceRequest } from "./models/CreateResourceRequest";
import { CreateResourceResponse } from "./models/CreateResourceResponse";
import { CreateUserRequest } from "./models/CreateUserRequest";
import { CreateUserResponse } from "./models/CreateUserResponse";
import { Delegate } from "./models/Delegate";
import { DeleteAliasRequest } from "./models/DeleteAliasRequest";
import { DeleteAliasResponse } from "./models/DeleteAliasResponse";
import { DeleteGroupRequest } from "./models/DeleteGroupRequest";
import { DeleteGroupResponse } from "./models/DeleteGroupResponse";
import { DeleteResourceRequest } from "./models/DeleteResourceRequest";
import { DeleteResourceResponse } from "./models/DeleteResourceResponse";
import { DeleteUserRequest } from "./models/DeleteUserRequest";
import { DeleteUserResponse } from "./models/DeleteUserResponse";
import { DeregisterFromWorkMailRequest } from "./models/DeregisterFromWorkMailRequest";
import { DeregisterFromWorkMailResponse } from "./models/DeregisterFromWorkMailResponse";
import { DescribeGroupRequest } from "./models/DescribeGroupRequest";
import { DescribeGroupResponse } from "./models/DescribeGroupResponse";
import { DescribeOrganizationRequest } from "./models/DescribeOrganizationRequest";
import { DescribeOrganizationResponse } from "./models/DescribeOrganizationResponse";
import { DescribeResourceRequest } from "./models/DescribeResourceRequest";
import { DescribeResourceResponse } from "./models/DescribeResourceResponse";
import { DescribeUserRequest } from "./models/DescribeUserRequest";
import { DescribeUserResponse } from "./models/DescribeUserResponse";
import { DirectoryServiceAuthenticationFailedException } from "./models/DirectoryServiceAuthenticationFailedException";
import { DirectoryUnavailableException } from "./models/DirectoryUnavailableException";
import { DisassociateDelegateFromResourceRequest } from "./models/DisassociateDelegateFromResourceRequest";
import { DisassociateDelegateFromResourceResponse } from "./models/DisassociateDelegateFromResourceResponse";
import { DisassociateMemberFromGroupRequest } from "./models/DisassociateMemberFromGroupRequest";
import { DisassociateMemberFromGroupResponse } from "./models/DisassociateMemberFromGroupResponse";
import { EmailAddress } from "./models/EmailAddress";
import { EmailAddressInUseException } from "./models/EmailAddressInUseException";
import { EntityAlreadyRegisteredException } from "./models/EntityAlreadyRegisteredException";
import { EntityNotFoundException } from "./models/EntityNotFoundException";
import { EntityStateException } from "./models/EntityStateException";
import { Group } from "./models/Group";
import { GroupName } from "./models/GroupName";
import { Groups } from "./models/Groups";
import { InvalidConfigurationException } from "./models/InvalidConfigurationException";
import { InvalidParameterException } from "./models/InvalidParameterException";
import { InvalidPasswordException } from "./models/InvalidPasswordException";
import { ListAliasesRequest } from "./models/ListAliasesRequest";
import { ListAliasesResponse } from "./models/ListAliasesResponse";
import { ListGroupMembersRequest } from "./models/ListGroupMembersRequest";
import { ListGroupMembersResponse } from "./models/ListGroupMembersResponse";
import { ListGroupsRequest } from "./models/ListGroupsRequest";
import { ListGroupsResponse } from "./models/ListGroupsResponse";
import { ListOrganizationsRequest } from "./models/ListOrganizationsRequest";
import { ListOrganizationsResponse } from "./models/ListOrganizationsResponse";
import { ListResourceDelegatesRequest } from "./models/ListResourceDelegatesRequest";
import { ListResourceDelegatesResponse } from "./models/ListResourceDelegatesResponse";
import { ListResourcesRequest } from "./models/ListResourcesRequest";
import { ListResourcesResponse } from "./models/ListResourcesResponse";
import { ListUsersRequest } from "./models/ListUsersRequest";
import { ListUsersResponse } from "./models/ListUsersResponse";
import { MailDomainNotFoundException } from "./models/MailDomainNotFoundException";
import { MailDomainStateException } from "./models/MailDomainStateException";
import { MaxResults } from "./models/MaxResults";
import { Member } from "./models/Member";
import { Members } from "./models/Members";
import { NameAvailabilityException } from "./models/NameAvailabilityException";
import { NextToken } from "./models/NextToken";
import { OrganizationId } from "./models/OrganizationId";
import { OrganizationName } from "./models/OrganizationName";
import { OrganizationNotFoundException } from "./models/OrganizationNotFoundException";
import { OrganizationStateException } from "./models/OrganizationStateException";
import { OrganizationSummaries } from "./models/OrganizationSummaries";
import { OrganizationSummary } from "./models/OrganizationSummary";
import { Password } from "./models/Password";
import { RegisterToWorkMailRequest } from "./models/RegisterToWorkMailRequest";
import { RegisterToWorkMailResponse } from "./models/RegisterToWorkMailResponse";
import { ReservedNameException } from "./models/ReservedNameException";
import { ResetPasswordRequest } from "./models/ResetPasswordRequest";
import { ResetPasswordResponse } from "./models/ResetPasswordResponse";
import { Resource } from "./models/Resource";
import { ResourceDelegates } from "./models/ResourceDelegates";
import { ResourceId } from "./models/ResourceId";
import { ResourceName } from "./models/ResourceName";
import { Resources } from "./models/Resources";
import { String } from "./models/String";
import { Timestamp } from "./models/Timestamp";
import { UnsupportedOperationException } from "./models/UnsupportedOperationException";
import { UpdatePrimaryEmailAddressRequest } from "./models/UpdatePrimaryEmailAddressRequest";
import { UpdatePrimaryEmailAddressResponse } from "./models/UpdatePrimaryEmailAddressResponse";
import { UpdateResourceRequest } from "./models/UpdateResourceRequest";
import { UpdateResourceResponse } from "./models/UpdateResourceResponse";
import { User } from "./models/User";
import { UserName } from "./models/UserName";
import { Users } from "./models/Users";
import { WorkMailIdentifier } from "./models/WorkMailIdentifier";
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpErrorResponse
} from "@angular/common/http";
import { Injectable } from "@angular/core";
import { Subject, Observable } from "rxjs";

// this fixes Angular async pipe usage
// rxjs throw an error if no error handler is found in every subscription
// https://github.com/ReactiveX/rxjs/issues/2145 2180
// fixed in RXJS 6 (untested ^.^)

Subject.prototype.error = function(err) {
  if (this.closed) {
    throw new Error("Subject closed");
  }
  this.hasError = true;
  this.thrownError = err;
  this.isStopped = true;
  var observers = this.observers;
  var len = observers.length;
  var copy = observers.slice();
  for (var i = 0; i < len; i++) {
    try {
      copy[i].error(err);
    } catch (e) {}
  }
  this.observers.length = 0;
};

// Angular 5 doesn't support object via get
// but we must do
// credits/license: https://github.com/knowledgecode/jquery-param
function qsStringify(a) {
  var s = [];
  var rbracket = /[]$/;
  var add = function(k, v) {
    // ignore functions, because are part of TypeScript classes :S
    if (typeof v !== "function") {
      v = typeof v === "function" ? v() : v;
      v = v === null ? "" : v === undefined ? "" : v;
      s[s.length] = encodeURIComponent(k) + "=" + encodeURIComponent(v);
    }
  };

  var buildParams = function(prefix, obj) {
    var i, len, key;

    if (prefix) {
      if (Array.isArray(obj)) {
        for (i = 0, len = obj.length; i < len; i++) {
          if (rbracket.test(prefix)) {
            add(prefix, obj[i]);
          } else {
            buildParams(
              prefix +
                "[" +
                (typeof obj[i] === "object" && obj[i] ? i : "") +
                "]",
              obj[i]
            );
          }
        }
      } else if (String(obj) === "[object Object]") {
        for (key in obj) {
          buildParams(prefix + "[" + key + "]", obj[key]);
        }
      } else {
        add(prefix, obj);
      }
    } else if (Array.isArray(obj)) {
      for (i = 0, len = obj.length; i < len; i++) {
        add(obj[i].name, obj[i].value);
      }
    } else {
      for (key in obj) {
        buildParams(key, obj[key]);
      }
    }
    return s;
  };

  return buildParams("", a).join("&");
}

@Injectable()
export class Api {
  scheme: string = "https";
  debug: boolean = false;
  host: string = "workmail.amazonaws.com";
  onError: Subject<CommonException> = new Subject<CommonException>();

  constructor(public http: HttpClient) {}

  validSchemes: string[] = ["https", "http"];

  setDebug(d: boolean) {
    this.debug = d;
  }

  setScheme(scheme: string) {
    if (this.validSchemes.indexOf(scheme) === -1) {
      throw new Error(
        `Invalid scheme[${scheme}] must be one of: ${this.validSchemes.join(
          ", "
        )}`
      );
    }
    this.scheme = scheme;
  }

  setHost(host) {
    this.host = host;
  }

  getFullURL(uri: string): string {
    return `${this.scheme}://` + `${this.host}/${uri}`.replace(/\/\//g, "/");
  }

  // source: aws.workmail.yaml
  AssociateDelegateToResourceVerb: string = "POST";
  AssociateDelegateToResourceURI: string = "/";

  AssociateDelegateToResourceURL(): string {
    const $url = this.getFullURL(this.AssociateDelegateToResourceURI);

    return $url + "?";
  }

  AssociateDelegateToResource(
    Action: string,
    Version: string,
    xAmzContentSha256: string,
    xAmzDate: string,
    xAmzAlgorithm: string,
    xAmzCredential: string,
    xAmzSecurityToken: string,
    xAmzSignature: string,
    xAmzSignedheaders: string,
    body: AssociateDelegateToResourceRequest,
    $reqOptions: RequestOptions = null
  ): Subject<AssociateDelegateToResourceResponse> {
    $reqOptions = $reqOptions || { emitError: true };

    let $headers = new HttpHeaders();
    $headers = $headers.append("Content-Type", ["application/json"]);

    if (Action != null) {
      $headers = $headers.append("Action", Action);
    }

    if (Version != null) {
      $headers = $headers.append("Version", Version);
    }

    if (xAmzContentSha256 != null) {
      $headers = $headers.append("X-Amz-Content-Sha256", xAmzContentSha256);
    }

    if (xAmzDate != null) {
      $headers = $headers.append("X-Amz-Date", xAmzDate);
    }

    if (xAmzAlgorithm != null) {
      $headers = $headers.append("X-Amz-Algorithm", xAmzAlgorithm);
    }

    if (xAmzCredential != null) {
      $headers = $headers.append("X-Amz-Credential", xAmzCredential);
    }

    if (xAmzSecurityToken != null) {
      $headers = $headers.append("X-Amz-Security-Token", xAmzSecurityToken);
    }

    if (xAmzSignature != null) {
      $headers = $headers.append("X-Amz-Signature", xAmzSignature);
    }

    if (xAmzSignedheaders != null) {
      $headers = $headers.append("X-Amz-SignedHeaders", xAmzSignedheaders);
    }

    const $url: string = this.AssociateDelegateToResourceURL();
    const $options = {
      headers: $headers,
      responseType: "json" as "json",
      withCredentials: true // enable CORS
    };
    const observable = this.http.post<AssociateDelegateToResourceResponse>(
      $url,
      body,
      $options
    );

    const ret = new Subject<AssociateDelegateToResourceResponse>();
    observable.subscribe(
      (response: AssociateDelegateToResourceResponse) => {
        console.info(`POST:${$url}`, response, $reqOptions);

        ret.next(AssociateDelegateToResourceResponse.parse(response));
        ret.complete();
      },
      (response: HttpErrorResponse) => {
        console.error(`POST:${$url}`, response, $reqOptions);
        response.error.status = response.error.status || response.status;
        const error = CommonException.parse(response.error);

        ret.error(error);
        ret.complete();

        // notify global error handler
        if ($reqOptions.emitError) {
          this.onError.next(error);
        }
      }
    );

    return ret;
  }

  // source: aws.workmail.yaml
  AssociateMemberToGroupVerb: string = "POST";
  AssociateMemberToGroupURI: string = "/#AssociateMemberToGroup";

  AssociateMemberToGroupURL(): string {
    const $url = this.getFullURL(this.AssociateMemberToGroupURI);

    return $url + "?";
  }

  AssociateMemberToGroup(
    Action: string,
    Version: string,
    xAmzContentSha256: string,
    xAmzDate: string,
    xAmzAlgorithm: string,
    xAmzCredential: string,
    xAmzSecurityToken: string,
    xAmzSignature: string,
    xAmzSignedheaders: string,
    body: AssociateMemberToGroupRequest,
    $reqOptions: RequestOptions = null
  ): Subject<AssociateMemberToGroupResponse> {
    $reqOptions = $reqOptions || { emitError: true };

    let $headers = new HttpHeaders();
    $headers = $headers.append("Content-Type", ["application/json"]);

    if (Action != null) {
      $headers = $headers.append("Action", Action);
    }

    if (Version != null) {
      $headers = $headers.append("Version", Version);
    }

    if (xAmzContentSha256 != null) {
      $headers = $headers.append("X-Amz-Content-Sha256", xAmzContentSha256);
    }

    if (xAmzDate != null) {
      $headers = $headers.append("X-Amz-Date", xAmzDate);
    }

    if (xAmzAlgorithm != null) {
      $headers = $headers.append("X-Amz-Algorithm", xAmzAlgorithm);
    }

    if (xAmzCredential != null) {
      $headers = $headers.append("X-Amz-Credential", xAmzCredential);
    }

    if (xAmzSecurityToken != null) {
      $headers = $headers.append("X-Amz-Security-Token", xAmzSecurityToken);
    }

    if (xAmzSignature != null) {
      $headers = $headers.append("X-Amz-Signature", xAmzSignature);
    }

    if (xAmzSignedheaders != null) {
      $headers = $headers.append("X-Amz-SignedHeaders", xAmzSignedheaders);
    }

    const $url: string = this.AssociateMemberToGroupURL();
    const $options = {
      headers: $headers,
      responseType: "json" as "json",
      withCredentials: true // enable CORS
    };
    const observable = this.http.post<AssociateMemberToGroupResponse>(
      $url,
      body,
      $options
    );

    const ret = new Subject<AssociateMemberToGroupResponse>();
    observable.subscribe(
      (response: AssociateMemberToGroupResponse) => {
        console.info(`POST:${$url}`, response, $reqOptions);

        ret.next(AssociateMemberToGroupResponse.parse(response));
        ret.complete();
      },
      (response: HttpErrorResponse) => {
        console.error(`POST:${$url}`, response, $reqOptions);
        response.error.status = response.error.status || response.status;
        const error = CommonException.parse(response.error);

        ret.error(error);
        ret.complete();

        // notify global error handler
        if ($reqOptions.emitError) {
          this.onError.next(error);
        }
      }
    );

    return ret;
  }

  // source: aws.workmail.yaml
  CreateAliasVerb: string = "POST";
  CreateAliasURI: string = "/#CreateAlias";

  CreateAliasURL(): string {
    const $url = this.getFullURL(this.CreateAliasURI);

    return $url + "?";
  }

  CreateAlias(
    Action: string,
    Version: string,
    xAmzContentSha256: string,
    xAmzDate: string,
    xAmzAlgorithm: string,
    xAmzCredential: string,
    xAmzSecurityToken: string,
    xAmzSignature: string,
    xAmzSignedheaders: string,
    body: CreateAliasRequest,
    $reqOptions: RequestOptions = null
  ): Subject<CreateAliasResponse> {
    $reqOptions = $reqOptions || { emitError: true };

    let $headers = new HttpHeaders();
    $headers = $headers.append("Content-Type", ["application/json"]);

    if (Action != null) {
      $headers = $headers.append("Action", Action);
    }

    if (Version != null) {
      $headers = $headers.append("Version", Version);
    }

    if (xAmzContentSha256 != null) {
      $headers = $headers.append("X-Amz-Content-Sha256", xAmzContentSha256);
    }

    if (xAmzDate != null) {
      $headers = $headers.append("X-Amz-Date", xAmzDate);
    }

    if (xAmzAlgorithm != null) {
      $headers = $headers.append("X-Amz-Algorithm", xAmzAlgorithm);
    }

    if (xAmzCredential != null) {
      $headers = $headers.append("X-Amz-Credential", xAmzCredential);
    }

    if (xAmzSecurityToken != null) {
      $headers = $headers.append("X-Amz-Security-Token", xAmzSecurityToken);
    }

    if (xAmzSignature != null) {
      $headers = $headers.append("X-Amz-Signature", xAmzSignature);
    }

    if (xAmzSignedheaders != null) {
      $headers = $headers.append("X-Amz-SignedHeaders", xAmzSignedheaders);
    }

    const $url: string = this.CreateAliasURL();
    const $options = {
      headers: $headers,
      responseType: "json" as "json",
      withCredentials: true // enable CORS
    };
    const observable = this.http.post<CreateAliasResponse>(
      $url,
      body,
      $options
    );

    const ret = new Subject<CreateAliasResponse>();
    observable.subscribe(
      (response: CreateAliasResponse) => {
        console.info(`POST:${$url}`, response, $reqOptions);

        ret.next(CreateAliasResponse.parse(response));
        ret.complete();
      },
      (response: HttpErrorResponse) => {
        console.error(`POST:${$url}`, response, $reqOptions);
        response.error.status = response.error.status || response.status;
        const error = CommonException.parse(response.error);

        ret.error(error);
        ret.complete();

        // notify global error handler
        if ($reqOptions.emitError) {
          this.onError.next(error);
        }
      }
    );

    return ret;
  }

  // source: aws.workmail.yaml
  CreateGroupVerb: string = "POST";
  CreateGroupURI: string = "/#CreateGroup";

  CreateGroupURL(): string {
    const $url = this.getFullURL(this.CreateGroupURI);

    return $url + "?";
  }

  CreateGroup(
    Action: string,
    Version: string,
    xAmzContentSha256: string,
    xAmzDate: string,
    xAmzAlgorithm: string,
    xAmzCredential: string,
    xAmzSecurityToken: string,
    xAmzSignature: string,
    xAmzSignedheaders: string,
    body: CreateGroupRequest,
    $reqOptions: RequestOptions = null
  ): Subject<CreateGroupResponse> {
    $reqOptions = $reqOptions || { emitError: true };

    let $headers = new HttpHeaders();
    $headers = $headers.append("Content-Type", ["application/json"]);

    if (Action != null) {
      $headers = $headers.append("Action", Action);
    }

    if (Version != null) {
      $headers = $headers.append("Version", Version);
    }

    if (xAmzContentSha256 != null) {
      $headers = $headers.append("X-Amz-Content-Sha256", xAmzContentSha256);
    }

    if (xAmzDate != null) {
      $headers = $headers.append("X-Amz-Date", xAmzDate);
    }

    if (xAmzAlgorithm != null) {
      $headers = $headers.append("X-Amz-Algorithm", xAmzAlgorithm);
    }

    if (xAmzCredential != null) {
      $headers = $headers.append("X-Amz-Credential", xAmzCredential);
    }

    if (xAmzSecurityToken != null) {
      $headers = $headers.append("X-Amz-Security-Token", xAmzSecurityToken);
    }

    if (xAmzSignature != null) {
      $headers = $headers.append("X-Amz-Signature", xAmzSignature);
    }

    if (xAmzSignedheaders != null) {
      $headers = $headers.append("X-Amz-SignedHeaders", xAmzSignedheaders);
    }

    const $url: string = this.CreateGroupURL();
    const $options = {
      headers: $headers,
      responseType: "json" as "json",
      withCredentials: true // enable CORS
    };
    const observable = this.http.post<CreateGroupResponse>(
      $url,
      body,
      $options
    );

    const ret = new Subject<CreateGroupResponse>();
    observable.subscribe(
      (response: CreateGroupResponse) => {
        console.info(`POST:${$url}`, response, $reqOptions);

        ret.next(CreateGroupResponse.parse(response));
        ret.complete();
      },
      (response: HttpErrorResponse) => {
        console.error(`POST:${$url}`, response, $reqOptions);
        response.error.status = response.error.status || response.status;
        const error = CommonException.parse(response.error);

        ret.error(error);
        ret.complete();

        // notify global error handler
        if ($reqOptions.emitError) {
          this.onError.next(error);
        }
      }
    );

    return ret;
  }

  // source: aws.workmail.yaml
  CreateResourceVerb: string = "POST";
  CreateResourceURI: string = "/#CreateResource";

  CreateResourceURL(): string {
    const $url = this.getFullURL(this.CreateResourceURI);

    return $url + "?";
  }

  CreateResource(
    Action: string,
    Version: string,
    xAmzContentSha256: string,
    xAmzDate: string,
    xAmzAlgorithm: string,
    xAmzCredential: string,
    xAmzSecurityToken: string,
    xAmzSignature: string,
    xAmzSignedheaders: string,
    body: CreateResourceRequest,
    $reqOptions: RequestOptions = null
  ): Subject<CreateResourceResponse> {
    $reqOptions = $reqOptions || { emitError: true };

    let $headers = new HttpHeaders();
    $headers = $headers.append("Content-Type", ["application/json"]);

    if (Action != null) {
      $headers = $headers.append("Action", Action);
    }

    if (Version != null) {
      $headers = $headers.append("Version", Version);
    }

    if (xAmzContentSha256 != null) {
      $headers = $headers.append("X-Amz-Content-Sha256", xAmzContentSha256);
    }

    if (xAmzDate != null) {
      $headers = $headers.append("X-Amz-Date", xAmzDate);
    }

    if (xAmzAlgorithm != null) {
      $headers = $headers.append("X-Amz-Algorithm", xAmzAlgorithm);
    }

    if (xAmzCredential != null) {
      $headers = $headers.append("X-Amz-Credential", xAmzCredential);
    }

    if (xAmzSecurityToken != null) {
      $headers = $headers.append("X-Amz-Security-Token", xAmzSecurityToken);
    }

    if (xAmzSignature != null) {
      $headers = $headers.append("X-Amz-Signature", xAmzSignature);
    }

    if (xAmzSignedheaders != null) {
      $headers = $headers.append("X-Amz-SignedHeaders", xAmzSignedheaders);
    }

    const $url: string = this.CreateResourceURL();
    const $options = {
      headers: $headers,
      responseType: "json" as "json",
      withCredentials: true // enable CORS
    };
    const observable = this.http.post<CreateResourceResponse>(
      $url,
      body,
      $options
    );

    const ret = new Subject<CreateResourceResponse>();
    observable.subscribe(
      (response: CreateResourceResponse) => {
        console.info(`POST:${$url}`, response, $reqOptions);

        ret.next(CreateResourceResponse.parse(response));
        ret.complete();
      },
      (response: HttpErrorResponse) => {
        console.error(`POST:${$url}`, response, $reqOptions);
        response.error.status = response.error.status || response.status;
        const error = CommonException.parse(response.error);

        ret.error(error);
        ret.complete();

        // notify global error handler
        if ($reqOptions.emitError) {
          this.onError.next(error);
        }
      }
    );

    return ret;
  }

  // source: aws.workmail.yaml
  CreateUserVerb: string = "POST";
  CreateUserURI: string = "/#CreateUser";

  CreateUserURL(): string {
    const $url = this.getFullURL(this.CreateUserURI);

    return $url + "?";
  }

  CreateUser(
    Action: string,
    Version: string,
    xAmzContentSha256: string,
    xAmzDate: string,
    xAmzAlgorithm: string,
    xAmzCredential: string,
    xAmzSecurityToken: string,
    xAmzSignature: string,
    xAmzSignedheaders: string,
    body: CreateUserRequest,
    $reqOptions: RequestOptions = null
  ): Subject<CreateUserResponse> {
    $reqOptions = $reqOptions || { emitError: true };

    let $headers = new HttpHeaders();
    $headers = $headers.append("Content-Type", ["application/json"]);

    if (Action != null) {
      $headers = $headers.append("Action", Action);
    }

    if (Version != null) {
      $headers = $headers.append("Version", Version);
    }

    if (xAmzContentSha256 != null) {
      $headers = $headers.append("X-Amz-Content-Sha256", xAmzContentSha256);
    }

    if (xAmzDate != null) {
      $headers = $headers.append("X-Amz-Date", xAmzDate);
    }

    if (xAmzAlgorithm != null) {
      $headers = $headers.append("X-Amz-Algorithm", xAmzAlgorithm);
    }

    if (xAmzCredential != null) {
      $headers = $headers.append("X-Amz-Credential", xAmzCredential);
    }

    if (xAmzSecurityToken != null) {
      $headers = $headers.append("X-Amz-Security-Token", xAmzSecurityToken);
    }

    if (xAmzSignature != null) {
      $headers = $headers.append("X-Amz-Signature", xAmzSignature);
    }

    if (xAmzSignedheaders != null) {
      $headers = $headers.append("X-Amz-SignedHeaders", xAmzSignedheaders);
    }

    const $url: string = this.CreateUserURL();
    const $options = {
      headers: $headers,
      responseType: "json" as "json",
      withCredentials: true // enable CORS
    };
    const observable = this.http.post<CreateUserResponse>($url, body, $options);

    const ret = new Subject<CreateUserResponse>();
    observable.subscribe(
      (response: CreateUserResponse) => {
        console.info(`POST:${$url}`, response, $reqOptions);

        ret.next(CreateUserResponse.parse(response));
        ret.complete();
      },
      (response: HttpErrorResponse) => {
        console.error(`POST:${$url}`, response, $reqOptions);
        response.error.status = response.error.status || response.status;
        const error = CommonException.parse(response.error);

        ret.error(error);
        ret.complete();

        // notify global error handler
        if ($reqOptions.emitError) {
          this.onError.next(error);
        }
      }
    );

    return ret;
  }

  // source: aws.workmail.yaml
  DeleteAliasVerb: string = "POST";
  DeleteAliasURI: string = "/#DeleteAlias";

  DeleteAliasURL(): string {
    const $url = this.getFullURL(this.DeleteAliasURI);

    return $url + "?";
  }

  DeleteAlias(
    Action: string,
    Version: string,
    xAmzContentSha256: string,
    xAmzDate: string,
    xAmzAlgorithm: string,
    xAmzCredential: string,
    xAmzSecurityToken: string,
    xAmzSignature: string,
    xAmzSignedheaders: string,
    body: DeleteAliasRequest,
    $reqOptions: RequestOptions = null
  ): Subject<DeleteAliasResponse> {
    $reqOptions = $reqOptions || { emitError: true };

    let $headers = new HttpHeaders();
    $headers = $headers.append("Content-Type", ["application/json"]);

    if (Action != null) {
      $headers = $headers.append("Action", Action);
    }

    if (Version != null) {
      $headers = $headers.append("Version", Version);
    }

    if (xAmzContentSha256 != null) {
      $headers = $headers.append("X-Amz-Content-Sha256", xAmzContentSha256);
    }

    if (xAmzDate != null) {
      $headers = $headers.append("X-Amz-Date", xAmzDate);
    }

    if (xAmzAlgorithm != null) {
      $headers = $headers.append("X-Amz-Algorithm", xAmzAlgorithm);
    }

    if (xAmzCredential != null) {
      $headers = $headers.append("X-Amz-Credential", xAmzCredential);
    }

    if (xAmzSecurityToken != null) {
      $headers = $headers.append("X-Amz-Security-Token", xAmzSecurityToken);
    }

    if (xAmzSignature != null) {
      $headers = $headers.append("X-Amz-Signature", xAmzSignature);
    }

    if (xAmzSignedheaders != null) {
      $headers = $headers.append("X-Amz-SignedHeaders", xAmzSignedheaders);
    }

    const $url: string = this.DeleteAliasURL();
    const $options = {
      headers: $headers,
      responseType: "json" as "json",
      withCredentials: true // enable CORS
    };
    const observable = this.http.post<DeleteAliasResponse>(
      $url,
      body,
      $options
    );

    const ret = new Subject<DeleteAliasResponse>();
    observable.subscribe(
      (response: DeleteAliasResponse) => {
        console.info(`POST:${$url}`, response, $reqOptions);

        ret.next(DeleteAliasResponse.parse(response));
        ret.complete();
      },
      (response: HttpErrorResponse) => {
        console.error(`POST:${$url}`, response, $reqOptions);
        response.error.status = response.error.status || response.status;
        const error = CommonException.parse(response.error);

        ret.error(error);
        ret.complete();

        // notify global error handler
        if ($reqOptions.emitError) {
          this.onError.next(error);
        }
      }
    );

    return ret;
  }

  // source: aws.workmail.yaml
  DeleteGroupVerb: string = "POST";
  DeleteGroupURI: string = "/#DeleteGroup";

  DeleteGroupURL(): string {
    const $url = this.getFullURL(this.DeleteGroupURI);

    return $url + "?";
  }

  DeleteGroup(
    Action: string,
    Version: string,
    xAmzContentSha256: string,
    xAmzDate: string,
    xAmzAlgorithm: string,
    xAmzCredential: string,
    xAmzSecurityToken: string,
    xAmzSignature: string,
    xAmzSignedheaders: string,
    body: DeleteGroupRequest,
    $reqOptions: RequestOptions = null
  ): Subject<DeleteGroupResponse> {
    $reqOptions = $reqOptions || { emitError: true };

    let $headers = new HttpHeaders();
    $headers = $headers.append("Content-Type", ["application/json"]);

    if (Action != null) {
      $headers = $headers.append("Action", Action);
    }

    if (Version != null) {
      $headers = $headers.append("Version", Version);
    }

    if (xAmzContentSha256 != null) {
      $headers = $headers.append("X-Amz-Content-Sha256", xAmzContentSha256);
    }

    if (xAmzDate != null) {
      $headers = $headers.append("X-Amz-Date", xAmzDate);
    }

    if (xAmzAlgorithm != null) {
      $headers = $headers.append("X-Amz-Algorithm", xAmzAlgorithm);
    }

    if (xAmzCredential != null) {
      $headers = $headers.append("X-Amz-Credential", xAmzCredential);
    }

    if (xAmzSecurityToken != null) {
      $headers = $headers.append("X-Amz-Security-Token", xAmzSecurityToken);
    }

    if (xAmzSignature != null) {
      $headers = $headers.append("X-Amz-Signature", xAmzSignature);
    }

    if (xAmzSignedheaders != null) {
      $headers = $headers.append("X-Amz-SignedHeaders", xAmzSignedheaders);
    }

    const $url: string = this.DeleteGroupURL();
    const $options = {
      headers: $headers,
      responseType: "json" as "json",
      withCredentials: true // enable CORS
    };
    const observable = this.http.post<DeleteGroupResponse>(
      $url,
      body,
      $options
    );

    const ret = new Subject<DeleteGroupResponse>();
    observable.subscribe(
      (response: DeleteGroupResponse) => {
        console.info(`POST:${$url}`, response, $reqOptions);

        ret.next(DeleteGroupResponse.parse(response));
        ret.complete();
      },
      (response: HttpErrorResponse) => {
        console.error(`POST:${$url}`, response, $reqOptions);
        response.error.status = response.error.status || response.status;
        const error = CommonException.parse(response.error);

        ret.error(error);
        ret.complete();

        // notify global error handler
        if ($reqOptions.emitError) {
          this.onError.next(error);
        }
      }
    );

    return ret;
  }

  // source: aws.workmail.yaml
  DeleteResourceVerb: string = "POST";
  DeleteResourceURI: string = "/#DeleteResource";

  DeleteResourceURL(): string {
    const $url = this.getFullURL(this.DeleteResourceURI);

    return $url + "?";
  }

  DeleteResource(
    Action: string,
    Version: string,
    xAmzContentSha256: string,
    xAmzDate: string,
    xAmzAlgorithm: string,
    xAmzCredential: string,
    xAmzSecurityToken: string,
    xAmzSignature: string,
    xAmzSignedheaders: string,
    body: DeleteResourceRequest,
    $reqOptions: RequestOptions = null
  ): Subject<DeleteResourceResponse> {
    $reqOptions = $reqOptions || { emitError: true };

    let $headers = new HttpHeaders();
    $headers = $headers.append("Content-Type", ["application/json"]);

    if (Action != null) {
      $headers = $headers.append("Action", Action);
    }

    if (Version != null) {
      $headers = $headers.append("Version", Version);
    }

    if (xAmzContentSha256 != null) {
      $headers = $headers.append("X-Amz-Content-Sha256", xAmzContentSha256);
    }

    if (xAmzDate != null) {
      $headers = $headers.append("X-Amz-Date", xAmzDate);
    }

    if (xAmzAlgorithm != null) {
      $headers = $headers.append("X-Amz-Algorithm", xAmzAlgorithm);
    }

    if (xAmzCredential != null) {
      $headers = $headers.append("X-Amz-Credential", xAmzCredential);
    }

    if (xAmzSecurityToken != null) {
      $headers = $headers.append("X-Amz-Security-Token", xAmzSecurityToken);
    }

    if (xAmzSignature != null) {
      $headers = $headers.append("X-Amz-Signature", xAmzSignature);
    }

    if (xAmzSignedheaders != null) {
      $headers = $headers.append("X-Amz-SignedHeaders", xAmzSignedheaders);
    }

    const $url: string = this.DeleteResourceURL();
    const $options = {
      headers: $headers,
      responseType: "json" as "json",
      withCredentials: true // enable CORS
    };
    const observable = this.http.post<DeleteResourceResponse>(
      $url,
      body,
      $options
    );

    const ret = new Subject<DeleteResourceResponse>();
    observable.subscribe(
      (response: DeleteResourceResponse) => {
        console.info(`POST:${$url}`, response, $reqOptions);

        ret.next(DeleteResourceResponse.parse(response));
        ret.complete();
      },
      (response: HttpErrorResponse) => {
        console.error(`POST:${$url}`, response, $reqOptions);
        response.error.status = response.error.status || response.status;
        const error = CommonException.parse(response.error);

        ret.error(error);
        ret.complete();

        // notify global error handler
        if ($reqOptions.emitError) {
          this.onError.next(error);
        }
      }
    );

    return ret;
  }

  // source: aws.workmail.yaml
  DeleteUserVerb: string = "POST";
  DeleteUserURI: string = "/#DeleteUser";

  DeleteUserURL(): string {
    const $url = this.getFullURL(this.DeleteUserURI);

    return $url + "?";
  }

  DeleteUser(
    Action: string,
    Version: string,
    xAmzContentSha256: string,
    xAmzDate: string,
    xAmzAlgorithm: string,
    xAmzCredential: string,
    xAmzSecurityToken: string,
    xAmzSignature: string,
    xAmzSignedheaders: string,
    body: DeleteUserRequest,
    $reqOptions: RequestOptions = null
  ): Subject<DeleteUserResponse> {
    $reqOptions = $reqOptions || { emitError: true };

    let $headers = new HttpHeaders();
    $headers = $headers.append("Content-Type", ["application/json"]);

    if (Action != null) {
      $headers = $headers.append("Action", Action);
    }

    if (Version != null) {
      $headers = $headers.append("Version", Version);
    }

    if (xAmzContentSha256 != null) {
      $headers = $headers.append("X-Amz-Content-Sha256", xAmzContentSha256);
    }

    if (xAmzDate != null) {
      $headers = $headers.append("X-Amz-Date", xAmzDate);
    }

    if (xAmzAlgorithm != null) {
      $headers = $headers.append("X-Amz-Algorithm", xAmzAlgorithm);
    }

    if (xAmzCredential != null) {
      $headers = $headers.append("X-Amz-Credential", xAmzCredential);
    }

    if (xAmzSecurityToken != null) {
      $headers = $headers.append("X-Amz-Security-Token", xAmzSecurityToken);
    }

    if (xAmzSignature != null) {
      $headers = $headers.append("X-Amz-Signature", xAmzSignature);
    }

    if (xAmzSignedheaders != null) {
      $headers = $headers.append("X-Amz-SignedHeaders", xAmzSignedheaders);
    }

    const $url: string = this.DeleteUserURL();
    const $options = {
      headers: $headers,
      responseType: "json" as "json",
      withCredentials: true // enable CORS
    };
    const observable = this.http.post<DeleteUserResponse>($url, body, $options);

    const ret = new Subject<DeleteUserResponse>();
    observable.subscribe(
      (response: DeleteUserResponse) => {
        console.info(`POST:${$url}`, response, $reqOptions);

        ret.next(DeleteUserResponse.parse(response));
        ret.complete();
      },
      (response: HttpErrorResponse) => {
        console.error(`POST:${$url}`, response, $reqOptions);
        response.error.status = response.error.status || response.status;
        const error = CommonException.parse(response.error);

        ret.error(error);
        ret.complete();

        // notify global error handler
        if ($reqOptions.emitError) {
          this.onError.next(error);
        }
      }
    );

    return ret;
  }

  // source: aws.workmail.yaml
  DeregisterFromWorkMailVerb: string = "POST";
  DeregisterFromWorkMailURI: string = "/#DeregisterFromWorkMail";

  DeregisterFromWorkMailURL(): string {
    const $url = this.getFullURL(this.DeregisterFromWorkMailURI);

    return $url + "?";
  }

  DeregisterFromWorkMail(
    Action: string,
    Version: string,
    xAmzContentSha256: string,
    xAmzDate: string,
    xAmzAlgorithm: string,
    xAmzCredential: string,
    xAmzSecurityToken: string,
    xAmzSignature: string,
    xAmzSignedheaders: string,
    body: DeregisterFromWorkMailRequest,
    $reqOptions: RequestOptions = null
  ): Subject<DeregisterFromWorkMailResponse> {
    $reqOptions = $reqOptions || { emitError: true };

    let $headers = new HttpHeaders();
    $headers = $headers.append("Content-Type", ["application/json"]);

    if (Action != null) {
      $headers = $headers.append("Action", Action);
    }

    if (Version != null) {
      $headers = $headers.append("Version", Version);
    }

    if (xAmzContentSha256 != null) {
      $headers = $headers.append("X-Amz-Content-Sha256", xAmzContentSha256);
    }

    if (xAmzDate != null) {
      $headers = $headers.append("X-Amz-Date", xAmzDate);
    }

    if (xAmzAlgorithm != null) {
      $headers = $headers.append("X-Amz-Algorithm", xAmzAlgorithm);
    }

    if (xAmzCredential != null) {
      $headers = $headers.append("X-Amz-Credential", xAmzCredential);
    }

    if (xAmzSecurityToken != null) {
      $headers = $headers.append("X-Amz-Security-Token", xAmzSecurityToken);
    }

    if (xAmzSignature != null) {
      $headers = $headers.append("X-Amz-Signature", xAmzSignature);
    }

    if (xAmzSignedheaders != null) {
      $headers = $headers.append("X-Amz-SignedHeaders", xAmzSignedheaders);
    }

    const $url: string = this.DeregisterFromWorkMailURL();
    const $options = {
      headers: $headers,
      responseType: "json" as "json",
      withCredentials: true // enable CORS
    };
    const observable = this.http.post<DeregisterFromWorkMailResponse>(
      $url,
      body,
      $options
    );

    const ret = new Subject<DeregisterFromWorkMailResponse>();
    observable.subscribe(
      (response: DeregisterFromWorkMailResponse) => {
        console.info(`POST:${$url}`, response, $reqOptions);

        ret.next(DeregisterFromWorkMailResponse.parse(response));
        ret.complete();
      },
      (response: HttpErrorResponse) => {
        console.error(`POST:${$url}`, response, $reqOptions);
        response.error.status = response.error.status || response.status;
        const error = CommonException.parse(response.error);

        ret.error(error);
        ret.complete();

        // notify global error handler
        if ($reqOptions.emitError) {
          this.onError.next(error);
        }
      }
    );

    return ret;
  }

  // source: aws.workmail.yaml
  DescribeGroupVerb: string = "POST";
  DescribeGroupURI: string = "/#DescribeGroup";

  DescribeGroupURL(): string {
    const $url = this.getFullURL(this.DescribeGroupURI);

    return $url + "?";
  }

  DescribeGroup(
    Action: string,
    Version: string,
    xAmzContentSha256: string,
    xAmzDate: string,
    xAmzAlgorithm: string,
    xAmzCredential: string,
    xAmzSecurityToken: string,
    xAmzSignature: string,
    xAmzSignedheaders: string,
    body: DescribeGroupRequest,
    $reqOptions: RequestOptions = null
  ): Subject<DescribeGroupResponse> {
    $reqOptions = $reqOptions || { emitError: true };

    let $headers = new HttpHeaders();
    $headers = $headers.append("Content-Type", ["application/json"]);

    if (Action != null) {
      $headers = $headers.append("Action", Action);
    }

    if (Version != null) {
      $headers = $headers.append("Version", Version);
    }

    if (xAmzContentSha256 != null) {
      $headers = $headers.append("X-Amz-Content-Sha256", xAmzContentSha256);
    }

    if (xAmzDate != null) {
      $headers = $headers.append("X-Amz-Date", xAmzDate);
    }

    if (xAmzAlgorithm != null) {
      $headers = $headers.append("X-Amz-Algorithm", xAmzAlgorithm);
    }

    if (xAmzCredential != null) {
      $headers = $headers.append("X-Amz-Credential", xAmzCredential);
    }

    if (xAmzSecurityToken != null) {
      $headers = $headers.append("X-Amz-Security-Token", xAmzSecurityToken);
    }

    if (xAmzSignature != null) {
      $headers = $headers.append("X-Amz-Signature", xAmzSignature);
    }

    if (xAmzSignedheaders != null) {
      $headers = $headers.append("X-Amz-SignedHeaders", xAmzSignedheaders);
    }

    const $url: string = this.DescribeGroupURL();
    const $options = {
      headers: $headers,
      responseType: "json" as "json",
      withCredentials: true // enable CORS
    };
    const observable = this.http.post<DescribeGroupResponse>(
      $url,
      body,
      $options
    );

    const ret = new Subject<DescribeGroupResponse>();
    observable.subscribe(
      (response: DescribeGroupResponse) => {
        console.info(`POST:${$url}`, response, $reqOptions);

        ret.next(DescribeGroupResponse.parse(response));
        ret.complete();
      },
      (response: HttpErrorResponse) => {
        console.error(`POST:${$url}`, response, $reqOptions);
        response.error.status = response.error.status || response.status;
        const error = CommonException.parse(response.error);

        ret.error(error);
        ret.complete();

        // notify global error handler
        if ($reqOptions.emitError) {
          this.onError.next(error);
        }
      }
    );

    return ret;
  }

  // source: aws.workmail.yaml
  DescribeOrganizationVerb: string = "POST";
  DescribeOrganizationURI: string = "/#DescribeOrganization";

  DescribeOrganizationURL(): string {
    const $url = this.getFullURL(this.DescribeOrganizationURI);

    return $url + "?";
  }

  DescribeOrganization(
    Action: string,
    Version: string,
    xAmzContentSha256: string,
    xAmzDate: string,
    xAmzAlgorithm: string,
    xAmzCredential: string,
    xAmzSecurityToken: string,
    xAmzSignature: string,
    xAmzSignedheaders: string,
    body: DescribeOrganizationRequest,
    $reqOptions: RequestOptions = null
  ): Subject<DescribeOrganizationResponse> {
    $reqOptions = $reqOptions || { emitError: true };

    let $headers = new HttpHeaders();
    $headers = $headers.append("Content-Type", ["application/json"]);

    if (Action != null) {
      $headers = $headers.append("Action", Action);
    }

    if (Version != null) {
      $headers = $headers.append("Version", Version);
    }

    if (xAmzContentSha256 != null) {
      $headers = $headers.append("X-Amz-Content-Sha256", xAmzContentSha256);
    }

    if (xAmzDate != null) {
      $headers = $headers.append("X-Amz-Date", xAmzDate);
    }

    if (xAmzAlgorithm != null) {
      $headers = $headers.append("X-Amz-Algorithm", xAmzAlgorithm);
    }

    if (xAmzCredential != null) {
      $headers = $headers.append("X-Amz-Credential", xAmzCredential);
    }

    if (xAmzSecurityToken != null) {
      $headers = $headers.append("X-Amz-Security-Token", xAmzSecurityToken);
    }

    if (xAmzSignature != null) {
      $headers = $headers.append("X-Amz-Signature", xAmzSignature);
    }

    if (xAmzSignedheaders != null) {
      $headers = $headers.append("X-Amz-SignedHeaders", xAmzSignedheaders);
    }

    const $url: string = this.DescribeOrganizationURL();
    const $options = {
      headers: $headers,
      responseType: "json" as "json",
      withCredentials: true // enable CORS
    };
    const observable = this.http.post<DescribeOrganizationResponse>(
      $url,
      body,
      $options
    );

    const ret = new Subject<DescribeOrganizationResponse>();
    observable.subscribe(
      (response: DescribeOrganizationResponse) => {
        console.info(`POST:${$url}`, response, $reqOptions);

        ret.next(DescribeOrganizationResponse.parse(response));
        ret.complete();
      },
      (response: HttpErrorResponse) => {
        console.error(`POST:${$url}`, response, $reqOptions);
        response.error.status = response.error.status || response.status;
        const error = CommonException.parse(response.error);

        ret.error(error);
        ret.complete();

        // notify global error handler
        if ($reqOptions.emitError) {
          this.onError.next(error);
        }
      }
    );

    return ret;
  }

  // source: aws.workmail.yaml
  DescribeResourceVerb: string = "POST";
  DescribeResourceURI: string = "/#DescribeResource";

  DescribeResourceURL(): string {
    const $url = this.getFullURL(this.DescribeResourceURI);

    return $url + "?";
  }

  DescribeResource(
    Action: string,
    Version: string,
    xAmzContentSha256: string,
    xAmzDate: string,
    xAmzAlgorithm: string,
    xAmzCredential: string,
    xAmzSecurityToken: string,
    xAmzSignature: string,
    xAmzSignedheaders: string,
    body: DescribeResourceRequest,
    $reqOptions: RequestOptions = null
  ): Subject<DescribeResourceResponse> {
    $reqOptions = $reqOptions || { emitError: true };

    let $headers = new HttpHeaders();
    $headers = $headers.append("Content-Type", ["application/json"]);

    if (Action != null) {
      $headers = $headers.append("Action", Action);
    }

    if (Version != null) {
      $headers = $headers.append("Version", Version);
    }

    if (xAmzContentSha256 != null) {
      $headers = $headers.append("X-Amz-Content-Sha256", xAmzContentSha256);
    }

    if (xAmzDate != null) {
      $headers = $headers.append("X-Amz-Date", xAmzDate);
    }

    if (xAmzAlgorithm != null) {
      $headers = $headers.append("X-Amz-Algorithm", xAmzAlgorithm);
    }

    if (xAmzCredential != null) {
      $headers = $headers.append("X-Amz-Credential", xAmzCredential);
    }

    if (xAmzSecurityToken != null) {
      $headers = $headers.append("X-Amz-Security-Token", xAmzSecurityToken);
    }

    if (xAmzSignature != null) {
      $headers = $headers.append("X-Amz-Signature", xAmzSignature);
    }

    if (xAmzSignedheaders != null) {
      $headers = $headers.append("X-Amz-SignedHeaders", xAmzSignedheaders);
    }

    const $url: string = this.DescribeResourceURL();
    const $options = {
      headers: $headers,
      responseType: "json" as "json",
      withCredentials: true // enable CORS
    };
    const observable = this.http.post<DescribeResourceResponse>(
      $url,
      body,
      $options
    );

    const ret = new Subject<DescribeResourceResponse>();
    observable.subscribe(
      (response: DescribeResourceResponse) => {
        console.info(`POST:${$url}`, response, $reqOptions);

        ret.next(DescribeResourceResponse.parse(response));
        ret.complete();
      },
      (response: HttpErrorResponse) => {
        console.error(`POST:${$url}`, response, $reqOptions);
        response.error.status = response.error.status || response.status;
        const error = CommonException.parse(response.error);

        ret.error(error);
        ret.complete();

        // notify global error handler
        if ($reqOptions.emitError) {
          this.onError.next(error);
        }
      }
    );

    return ret;
  }

  // source: aws.workmail.yaml
  DescribeUserVerb: string = "POST";
  DescribeUserURI: string = "/#DescribeUser";

  DescribeUserURL(): string {
    const $url = this.getFullURL(this.DescribeUserURI);

    return $url + "?";
  }

  DescribeUser(
    Action: string,
    Version: string,
    xAmzContentSha256: string,
    xAmzDate: string,
    xAmzAlgorithm: string,
    xAmzCredential: string,
    xAmzSecurityToken: string,
    xAmzSignature: string,
    xAmzSignedheaders: string,
    body: DescribeUserRequest,
    $reqOptions: RequestOptions = null
  ): Subject<DescribeUserResponse> {
    $reqOptions = $reqOptions || { emitError: true };

    let $headers = new HttpHeaders();
    $headers = $headers.append("Content-Type", ["application/json"]);

    if (Action != null) {
      $headers = $headers.append("Action", Action);
    }

    if (Version != null) {
      $headers = $headers.append("Version", Version);
    }

    if (xAmzContentSha256 != null) {
      $headers = $headers.append("X-Amz-Content-Sha256", xAmzContentSha256);
    }

    if (xAmzDate != null) {
      $headers = $headers.append("X-Amz-Date", xAmzDate);
    }

    if (xAmzAlgorithm != null) {
      $headers = $headers.append("X-Amz-Algorithm", xAmzAlgorithm);
    }

    if (xAmzCredential != null) {
      $headers = $headers.append("X-Amz-Credential", xAmzCredential);
    }

    if (xAmzSecurityToken != null) {
      $headers = $headers.append("X-Amz-Security-Token", xAmzSecurityToken);
    }

    if (xAmzSignature != null) {
      $headers = $headers.append("X-Amz-Signature", xAmzSignature);
    }

    if (xAmzSignedheaders != null) {
      $headers = $headers.append("X-Amz-SignedHeaders", xAmzSignedheaders);
    }

    const $url: string = this.DescribeUserURL();
    const $options = {
      headers: $headers,
      responseType: "json" as "json",
      withCredentials: true // enable CORS
    };
    const observable = this.http.post<DescribeUserResponse>(
      $url,
      body,
      $options
    );

    const ret = new Subject<DescribeUserResponse>();
    observable.subscribe(
      (response: DescribeUserResponse) => {
        console.info(`POST:${$url}`, response, $reqOptions);

        ret.next(DescribeUserResponse.parse(response));
        ret.complete();
      },
      (response: HttpErrorResponse) => {
        console.error(`POST:${$url}`, response, $reqOptions);
        response.error.status = response.error.status || response.status;
        const error = CommonException.parse(response.error);

        ret.error(error);
        ret.complete();

        // notify global error handler
        if ($reqOptions.emitError) {
          this.onError.next(error);
        }
      }
    );

    return ret;
  }

  // source: aws.workmail.yaml
  DisassociateDelegateFromResourceVerb: string = "POST";
  DisassociateDelegateFromResourceURI: string = "/#DisassociateDelegateFromResource";

  DisassociateDelegateFromResourceURL(): string {
    const $url = this.getFullURL(this.DisassociateDelegateFromResourceURI);

    return $url + "?";
  }

  DisassociateDelegateFromResource(
    Action: string,
    Version: string,
    xAmzContentSha256: string,
    xAmzDate: string,
    xAmzAlgorithm: string,
    xAmzCredential: string,
    xAmzSecurityToken: string,
    xAmzSignature: string,
    xAmzSignedheaders: string,
    body: DisassociateDelegateFromResourceRequest,
    $reqOptions: RequestOptions = null
  ): Subject<DisassociateDelegateFromResourceResponse> {
    $reqOptions = $reqOptions || { emitError: true };

    let $headers = new HttpHeaders();
    $headers = $headers.append("Content-Type", ["application/json"]);

    if (Action != null) {
      $headers = $headers.append("Action", Action);
    }

    if (Version != null) {
      $headers = $headers.append("Version", Version);
    }

    if (xAmzContentSha256 != null) {
      $headers = $headers.append("X-Amz-Content-Sha256", xAmzContentSha256);
    }

    if (xAmzDate != null) {
      $headers = $headers.append("X-Amz-Date", xAmzDate);
    }

    if (xAmzAlgorithm != null) {
      $headers = $headers.append("X-Amz-Algorithm", xAmzAlgorithm);
    }

    if (xAmzCredential != null) {
      $headers = $headers.append("X-Amz-Credential", xAmzCredential);
    }

    if (xAmzSecurityToken != null) {
      $headers = $headers.append("X-Amz-Security-Token", xAmzSecurityToken);
    }

    if (xAmzSignature != null) {
      $headers = $headers.append("X-Amz-Signature", xAmzSignature);
    }

    if (xAmzSignedheaders != null) {
      $headers = $headers.append("X-Amz-SignedHeaders", xAmzSignedheaders);
    }

    const $url: string = this.DisassociateDelegateFromResourceURL();
    const $options = {
      headers: $headers,
      responseType: "json" as "json",
      withCredentials: true // enable CORS
    };
    const observable = this.http.post<DisassociateDelegateFromResourceResponse>(
      $url,
      body,
      $options
    );

    const ret = new Subject<DisassociateDelegateFromResourceResponse>();
    observable.subscribe(
      (response: DisassociateDelegateFromResourceResponse) => {
        console.info(`POST:${$url}`, response, $reqOptions);

        ret.next(DisassociateDelegateFromResourceResponse.parse(response));
        ret.complete();
      },
      (response: HttpErrorResponse) => {
        console.error(`POST:${$url}`, response, $reqOptions);
        response.error.status = response.error.status || response.status;
        const error = CommonException.parse(response.error);

        ret.error(error);
        ret.complete();

        // notify global error handler
        if ($reqOptions.emitError) {
          this.onError.next(error);
        }
      }
    );

    return ret;
  }

  // source: aws.workmail.yaml
  DisassociateMemberFromGroupVerb: string = "POST";
  DisassociateMemberFromGroupURI: string = "/#DisassociateMemberFromGroup";

  DisassociateMemberFromGroupURL(): string {
    const $url = this.getFullURL(this.DisassociateMemberFromGroupURI);

    return $url + "?";
  }

  DisassociateMemberFromGroup(
    Action: string,
    Version: string,
    xAmzContentSha256: string,
    xAmzDate: string,
    xAmzAlgorithm: string,
    xAmzCredential: string,
    xAmzSecurityToken: string,
    xAmzSignature: string,
    xAmzSignedheaders: string,
    body: DisassociateMemberFromGroupRequest,
    $reqOptions: RequestOptions = null
  ): Subject<DisassociateMemberFromGroupResponse> {
    $reqOptions = $reqOptions || { emitError: true };

    let $headers = new HttpHeaders();
    $headers = $headers.append("Content-Type", ["application/json"]);

    if (Action != null) {
      $headers = $headers.append("Action", Action);
    }

    if (Version != null) {
      $headers = $headers.append("Version", Version);
    }

    if (xAmzContentSha256 != null) {
      $headers = $headers.append("X-Amz-Content-Sha256", xAmzContentSha256);
    }

    if (xAmzDate != null) {
      $headers = $headers.append("X-Amz-Date", xAmzDate);
    }

    if (xAmzAlgorithm != null) {
      $headers = $headers.append("X-Amz-Algorithm", xAmzAlgorithm);
    }

    if (xAmzCredential != null) {
      $headers = $headers.append("X-Amz-Credential", xAmzCredential);
    }

    if (xAmzSecurityToken != null) {
      $headers = $headers.append("X-Amz-Security-Token", xAmzSecurityToken);
    }

    if (xAmzSignature != null) {
      $headers = $headers.append("X-Amz-Signature", xAmzSignature);
    }

    if (xAmzSignedheaders != null) {
      $headers = $headers.append("X-Amz-SignedHeaders", xAmzSignedheaders);
    }

    const $url: string = this.DisassociateMemberFromGroupURL();
    const $options = {
      headers: $headers,
      responseType: "json" as "json",
      withCredentials: true // enable CORS
    };
    const observable = this.http.post<DisassociateMemberFromGroupResponse>(
      $url,
      body,
      $options
    );

    const ret = new Subject<DisassociateMemberFromGroupResponse>();
    observable.subscribe(
      (response: DisassociateMemberFromGroupResponse) => {
        console.info(`POST:${$url}`, response, $reqOptions);

        ret.next(DisassociateMemberFromGroupResponse.parse(response));
        ret.complete();
      },
      (response: HttpErrorResponse) => {
        console.error(`POST:${$url}`, response, $reqOptions);
        response.error.status = response.error.status || response.status;
        const error = CommonException.parse(response.error);

        ret.error(error);
        ret.complete();

        // notify global error handler
        if ($reqOptions.emitError) {
          this.onError.next(error);
        }
      }
    );

    return ret;
  }

  // source: aws.workmail.yaml
  ListAliasesVerb: string = "POST";
  ListAliasesURI: string = "/#ListAliases";

  ListAliasesURL(MaxResults: string, NextToken: string): string {
    let $params = new HttpParams({
      fromString: qsStringify({
        MaxResults: MaxResults,
        NextToken: NextToken
      })
    });

    const $url = this.getFullURL(this.ListAliasesURI);

    return $url + "?" + $params.toString().replace(/\+/g, "%2B");
  }

  ListAliases(
    MaxResults: string,
    NextToken: string,
    Action: string,
    Version: string,
    xAmzContentSha256: string,
    xAmzDate: string,
    xAmzAlgorithm: string,
    xAmzCredential: string,
    xAmzSecurityToken: string,
    xAmzSignature: string,
    xAmzSignedheaders: string,
    body: ListAliasesRequest,
    $reqOptions: RequestOptions = null
  ): Subject<ListAliasesResponse> {
    $reqOptions = $reqOptions || { emitError: true };

    let $headers = new HttpHeaders();
    $headers = $headers.append("Content-Type", ["application/json"]);

    if (Action != null) {
      $headers = $headers.append("Action", Action);
    }

    if (Version != null) {
      $headers = $headers.append("Version", Version);
    }

    if (xAmzContentSha256 != null) {
      $headers = $headers.append("X-Amz-Content-Sha256", xAmzContentSha256);
    }

    if (xAmzDate != null) {
      $headers = $headers.append("X-Amz-Date", xAmzDate);
    }

    if (xAmzAlgorithm != null) {
      $headers = $headers.append("X-Amz-Algorithm", xAmzAlgorithm);
    }

    if (xAmzCredential != null) {
      $headers = $headers.append("X-Amz-Credential", xAmzCredential);
    }

    if (xAmzSecurityToken != null) {
      $headers = $headers.append("X-Amz-Security-Token", xAmzSecurityToken);
    }

    if (xAmzSignature != null) {
      $headers = $headers.append("X-Amz-Signature", xAmzSignature);
    }

    if (xAmzSignedheaders != null) {
      $headers = $headers.append("X-Amz-SignedHeaders", xAmzSignedheaders);
    }

    const $url: string = this.ListAliasesURL(MaxResults, NextToken);
    const $options = {
      headers: $headers,
      responseType: "json" as "json",
      withCredentials: true // enable CORS
    };
    const observable = this.http.post<ListAliasesResponse>(
      $url,
      body,
      $options
    );

    const ret = new Subject<ListAliasesResponse>();
    observable.subscribe(
      (response: ListAliasesResponse) => {
        console.info(`POST:${$url}`, response, $reqOptions);

        ret.next(ListAliasesResponse.parse(response));
        ret.complete();
      },
      (response: HttpErrorResponse) => {
        console.error(`POST:${$url}`, response, $reqOptions);
        response.error.status = response.error.status || response.status;
        const error = CommonException.parse(response.error);

        ret.error(error);
        ret.complete();

        // notify global error handler
        if ($reqOptions.emitError) {
          this.onError.next(error);
        }
      }
    );

    return ret;
  }

  // source: aws.workmail.yaml
  ListGroupMembersVerb: string = "POST";
  ListGroupMembersURI: string = "/#ListGroupMembers";

  ListGroupMembersURL(MaxResults: string, NextToken: string): string {
    let $params = new HttpParams({
      fromString: qsStringify({
        MaxResults: MaxResults,
        NextToken: NextToken
      })
    });

    const $url = this.getFullURL(this.ListGroupMembersURI);

    return $url + "?" + $params.toString().replace(/\+/g, "%2B");
  }

  ListGroupMembers(
    MaxResults: string,
    NextToken: string,
    Action: string,
    Version: string,
    xAmzContentSha256: string,
    xAmzDate: string,
    xAmzAlgorithm: string,
    xAmzCredential: string,
    xAmzSecurityToken: string,
    xAmzSignature: string,
    xAmzSignedheaders: string,
    body: ListGroupMembersRequest,
    $reqOptions: RequestOptions = null
  ): Subject<ListGroupMembersResponse> {
    $reqOptions = $reqOptions || { emitError: true };

    let $headers = new HttpHeaders();
    $headers = $headers.append("Content-Type", ["application/json"]);

    if (Action != null) {
      $headers = $headers.append("Action", Action);
    }

    if (Version != null) {
      $headers = $headers.append("Version", Version);
    }

    if (xAmzContentSha256 != null) {
      $headers = $headers.append("X-Amz-Content-Sha256", xAmzContentSha256);
    }

    if (xAmzDate != null) {
      $headers = $headers.append("X-Amz-Date", xAmzDate);
    }

    if (xAmzAlgorithm != null) {
      $headers = $headers.append("X-Amz-Algorithm", xAmzAlgorithm);
    }

    if (xAmzCredential != null) {
      $headers = $headers.append("X-Amz-Credential", xAmzCredential);
    }

    if (xAmzSecurityToken != null) {
      $headers = $headers.append("X-Amz-Security-Token", xAmzSecurityToken);
    }

    if (xAmzSignature != null) {
      $headers = $headers.append("X-Amz-Signature", xAmzSignature);
    }

    if (xAmzSignedheaders != null) {
      $headers = $headers.append("X-Amz-SignedHeaders", xAmzSignedheaders);
    }

    const $url: string = this.ListGroupMembersURL(MaxResults, NextToken);
    const $options = {
      headers: $headers,
      responseType: "json" as "json",
      withCredentials: true // enable CORS
    };
    const observable = this.http.post<ListGroupMembersResponse>(
      $url,
      body,
      $options
    );

    const ret = new Subject<ListGroupMembersResponse>();
    observable.subscribe(
      (response: ListGroupMembersResponse) => {
        console.info(`POST:${$url}`, response, $reqOptions);

        ret.next(ListGroupMembersResponse.parse(response));
        ret.complete();
      },
      (response: HttpErrorResponse) => {
        console.error(`POST:${$url}`, response, $reqOptions);
        response.error.status = response.error.status || response.status;
        const error = CommonException.parse(response.error);

        ret.error(error);
        ret.complete();

        // notify global error handler
        if ($reqOptions.emitError) {
          this.onError.next(error);
        }
      }
    );

    return ret;
  }

  // source: aws.workmail.yaml
  ListGroupsVerb: string = "POST";
  ListGroupsURI: string = "/#ListGroups";

  ListGroupsURL(MaxResults: string, NextToken: string): string {
    let $params = new HttpParams({
      fromString: qsStringify({
        MaxResults: MaxResults,
        NextToken: NextToken
      })
    });

    const $url = this.getFullURL(this.ListGroupsURI);

    return $url + "?" + $params.toString().replace(/\+/g, "%2B");
  }

  ListGroups(
    MaxResults: string,
    NextToken: string,
    Action: string,
    Version: string,
    xAmzContentSha256: string,
    xAmzDate: string,
    xAmzAlgorithm: string,
    xAmzCredential: string,
    xAmzSecurityToken: string,
    xAmzSignature: string,
    xAmzSignedheaders: string,
    body: ListGroupsRequest,
    $reqOptions: RequestOptions = null
  ): Subject<ListGroupsResponse> {
    $reqOptions = $reqOptions || { emitError: true };

    let $headers = new HttpHeaders();
    $headers = $headers.append("Content-Type", ["application/json"]);

    if (Action != null) {
      $headers = $headers.append("Action", Action);
    }

    if (Version != null) {
      $headers = $headers.append("Version", Version);
    }

    if (xAmzContentSha256 != null) {
      $headers = $headers.append("X-Amz-Content-Sha256", xAmzContentSha256);
    }

    if (xAmzDate != null) {
      $headers = $headers.append("X-Amz-Date", xAmzDate);
    }

    if (xAmzAlgorithm != null) {
      $headers = $headers.append("X-Amz-Algorithm", xAmzAlgorithm);
    }

    if (xAmzCredential != null) {
      $headers = $headers.append("X-Amz-Credential", xAmzCredential);
    }

    if (xAmzSecurityToken != null) {
      $headers = $headers.append("X-Amz-Security-Token", xAmzSecurityToken);
    }

    if (xAmzSignature != null) {
      $headers = $headers.append("X-Amz-Signature", xAmzSignature);
    }

    if (xAmzSignedheaders != null) {
      $headers = $headers.append("X-Amz-SignedHeaders", xAmzSignedheaders);
    }

    const $url: string = this.ListGroupsURL(MaxResults, NextToken);
    const $options = {
      headers: $headers,
      responseType: "json" as "json",
      withCredentials: true // enable CORS
    };
    const observable = this.http.post<ListGroupsResponse>($url, body, $options);

    const ret = new Subject<ListGroupsResponse>();
    observable.subscribe(
      (response: ListGroupsResponse) => {
        console.info(`POST:${$url}`, response, $reqOptions);

        ret.next(ListGroupsResponse.parse(response));
        ret.complete();
      },
      (response: HttpErrorResponse) => {
        console.error(`POST:${$url}`, response, $reqOptions);
        response.error.status = response.error.status || response.status;
        const error = CommonException.parse(response.error);

        ret.error(error);
        ret.complete();

        // notify global error handler
        if ($reqOptions.emitError) {
          this.onError.next(error);
        }
      }
    );

    return ret;
  }

  // source: aws.workmail.yaml
  ListOrganizationsVerb: string = "POST";
  ListOrganizationsURI: string = "/#ListOrganizations";

  ListOrganizationsURL(MaxResults: string, NextToken: string): string {
    let $params = new HttpParams({
      fromString: qsStringify({
        MaxResults: MaxResults,
        NextToken: NextToken
      })
    });

    const $url = this.getFullURL(this.ListOrganizationsURI);

    return $url + "?" + $params.toString().replace(/\+/g, "%2B");
  }

  ListOrganizations(
    MaxResults: string,
    NextToken: string,
    Action: string,
    Version: string,
    xAmzContentSha256: string,
    xAmzDate: string,
    xAmzAlgorithm: string,
    xAmzCredential: string,
    xAmzSecurityToken: string,
    xAmzSignature: string,
    xAmzSignedheaders: string,
    body: ListOrganizationsRequest,
    $reqOptions: RequestOptions = null
  ): Subject<ListOrganizationsResponse> {
    $reqOptions = $reqOptions || { emitError: true };

    let $headers = new HttpHeaders();
    $headers = $headers.append("Content-Type", ["application/json"]);

    if (Action != null) {
      $headers = $headers.append("Action", Action);
    }

    if (Version != null) {
      $headers = $headers.append("Version", Version);
    }

    if (xAmzContentSha256 != null) {
      $headers = $headers.append("X-Amz-Content-Sha256", xAmzContentSha256);
    }

    if (xAmzDate != null) {
      $headers = $headers.append("X-Amz-Date", xAmzDate);
    }

    if (xAmzAlgorithm != null) {
      $headers = $headers.append("X-Amz-Algorithm", xAmzAlgorithm);
    }

    if (xAmzCredential != null) {
      $headers = $headers.append("X-Amz-Credential", xAmzCredential);
    }

    if (xAmzSecurityToken != null) {
      $headers = $headers.append("X-Amz-Security-Token", xAmzSecurityToken);
    }

    if (xAmzSignature != null) {
      $headers = $headers.append("X-Amz-Signature", xAmzSignature);
    }

    if (xAmzSignedheaders != null) {
      $headers = $headers.append("X-Amz-SignedHeaders", xAmzSignedheaders);
    }

    const $url: string = this.ListOrganizationsURL(MaxResults, NextToken);
    const $options = {
      headers: $headers,
      responseType: "json" as "json",
      withCredentials: true // enable CORS
    };
    const observable = this.http.post<ListOrganizationsResponse>(
      $url,
      body,
      $options
    );

    const ret = new Subject<ListOrganizationsResponse>();
    observable.subscribe(
      (response: ListOrganizationsResponse) => {
        console.info(`POST:${$url}`, response, $reqOptions);

        ret.next(ListOrganizationsResponse.parse(response));
        ret.complete();
      },
      (response: HttpErrorResponse) => {
        console.error(`POST:${$url}`, response, $reqOptions);
        response.error.status = response.error.status || response.status;
        const error = CommonException.parse(response.error);

        ret.error(error);
        ret.complete();

        // notify global error handler
        if ($reqOptions.emitError) {
          this.onError.next(error);
        }
      }
    );

    return ret;
  }

  // source: aws.workmail.yaml
  ListResourceDelegatesVerb: string = "POST";
  ListResourceDelegatesURI: string = "/#ListResourceDelegates";

  ListResourceDelegatesURL(): string {
    const $url = this.getFullURL(this.ListResourceDelegatesURI);

    return $url + "?";
  }

  ListResourceDelegates(
    Action: string,
    Version: string,
    xAmzContentSha256: string,
    xAmzDate: string,
    xAmzAlgorithm: string,
    xAmzCredential: string,
    xAmzSecurityToken: string,
    xAmzSignature: string,
    xAmzSignedheaders: string,
    body: ListResourceDelegatesRequest,
    $reqOptions: RequestOptions = null
  ): Subject<ListResourceDelegatesResponse> {
    $reqOptions = $reqOptions || { emitError: true };

    let $headers = new HttpHeaders();
    $headers = $headers.append("Content-Type", ["application/json"]);

    if (Action != null) {
      $headers = $headers.append("Action", Action);
    }

    if (Version != null) {
      $headers = $headers.append("Version", Version);
    }

    if (xAmzContentSha256 != null) {
      $headers = $headers.append("X-Amz-Content-Sha256", xAmzContentSha256);
    }

    if (xAmzDate != null) {
      $headers = $headers.append("X-Amz-Date", xAmzDate);
    }

    if (xAmzAlgorithm != null) {
      $headers = $headers.append("X-Amz-Algorithm", xAmzAlgorithm);
    }

    if (xAmzCredential != null) {
      $headers = $headers.append("X-Amz-Credential", xAmzCredential);
    }

    if (xAmzSecurityToken != null) {
      $headers = $headers.append("X-Amz-Security-Token", xAmzSecurityToken);
    }

    if (xAmzSignature != null) {
      $headers = $headers.append("X-Amz-Signature", xAmzSignature);
    }

    if (xAmzSignedheaders != null) {
      $headers = $headers.append("X-Amz-SignedHeaders", xAmzSignedheaders);
    }

    const $url: string = this.ListResourceDelegatesURL();
    const $options = {
      headers: $headers,
      responseType: "json" as "json",
      withCredentials: true // enable CORS
    };
    const observable = this.http.post<ListResourceDelegatesResponse>(
      $url,
      body,
      $options
    );

    const ret = new Subject<ListResourceDelegatesResponse>();
    observable.subscribe(
      (response: ListResourceDelegatesResponse) => {
        console.info(`POST:${$url}`, response, $reqOptions);

        ret.next(ListResourceDelegatesResponse.parse(response));
        ret.complete();
      },
      (response: HttpErrorResponse) => {
        console.error(`POST:${$url}`, response, $reqOptions);
        response.error.status = response.error.status || response.status;
        const error = CommonException.parse(response.error);

        ret.error(error);
        ret.complete();

        // notify global error handler
        if ($reqOptions.emitError) {
          this.onError.next(error);
        }
      }
    );

    return ret;
  }

  // source: aws.workmail.yaml
  ListResourcesVerb: string = "POST";
  ListResourcesURI: string = "/#ListResources";

  ListResourcesURL(MaxResults: string, NextToken: string): string {
    let $params = new HttpParams({
      fromString: qsStringify({
        MaxResults: MaxResults,
        NextToken: NextToken
      })
    });

    const $url = this.getFullURL(this.ListResourcesURI);

    return $url + "?" + $params.toString().replace(/\+/g, "%2B");
  }

  ListResources(
    MaxResults: string,
    NextToken: string,
    Action: string,
    Version: string,
    xAmzContentSha256: string,
    xAmzDate: string,
    xAmzAlgorithm: string,
    xAmzCredential: string,
    xAmzSecurityToken: string,
    xAmzSignature: string,
    xAmzSignedheaders: string,
    body: ListResourcesRequest,
    $reqOptions: RequestOptions = null
  ): Subject<ListResourcesResponse> {
    $reqOptions = $reqOptions || { emitError: true };

    let $headers = new HttpHeaders();
    $headers = $headers.append("Content-Type", ["application/json"]);

    if (Action != null) {
      $headers = $headers.append("Action", Action);
    }

    if (Version != null) {
      $headers = $headers.append("Version", Version);
    }

    if (xAmzContentSha256 != null) {
      $headers = $headers.append("X-Amz-Content-Sha256", xAmzContentSha256);
    }

    if (xAmzDate != null) {
      $headers = $headers.append("X-Amz-Date", xAmzDate);
    }

    if (xAmzAlgorithm != null) {
      $headers = $headers.append("X-Amz-Algorithm", xAmzAlgorithm);
    }

    if (xAmzCredential != null) {
      $headers = $headers.append("X-Amz-Credential", xAmzCredential);
    }

    if (xAmzSecurityToken != null) {
      $headers = $headers.append("X-Amz-Security-Token", xAmzSecurityToken);
    }

    if (xAmzSignature != null) {
      $headers = $headers.append("X-Amz-Signature", xAmzSignature);
    }

    if (xAmzSignedheaders != null) {
      $headers = $headers.append("X-Amz-SignedHeaders", xAmzSignedheaders);
    }

    const $url: string = this.ListResourcesURL(MaxResults, NextToken);
    const $options = {
      headers: $headers,
      responseType: "json" as "json",
      withCredentials: true // enable CORS
    };
    const observable = this.http.post<ListResourcesResponse>(
      $url,
      body,
      $options
    );

    const ret = new Subject<ListResourcesResponse>();
    observable.subscribe(
      (response: ListResourcesResponse) => {
        console.info(`POST:${$url}`, response, $reqOptions);

        ret.next(ListResourcesResponse.parse(response));
        ret.complete();
      },
      (response: HttpErrorResponse) => {
        console.error(`POST:${$url}`, response, $reqOptions);
        response.error.status = response.error.status || response.status;
        const error = CommonException.parse(response.error);

        ret.error(error);
        ret.complete();

        // notify global error handler
        if ($reqOptions.emitError) {
          this.onError.next(error);
        }
      }
    );

    return ret;
  }

  // source: aws.workmail.yaml
  ListUsersVerb: string = "POST";
  ListUsersURI: string = "/#ListUsers";

  ListUsersURL(MaxResults: string, NextToken: string): string {
    let $params = new HttpParams({
      fromString: qsStringify({
        MaxResults: MaxResults,
        NextToken: NextToken
      })
    });

    const $url = this.getFullURL(this.ListUsersURI);

    return $url + "?" + $params.toString().replace(/\+/g, "%2B");
  }

  ListUsers(
    MaxResults: string,
    NextToken: string,
    Action: string,
    Version: string,
    xAmzContentSha256: string,
    xAmzDate: string,
    xAmzAlgorithm: string,
    xAmzCredential: string,
    xAmzSecurityToken: string,
    xAmzSignature: string,
    xAmzSignedheaders: string,
    body: ListUsersRequest,
    $reqOptions: RequestOptions = null
  ): Subject<ListUsersResponse> {
    $reqOptions = $reqOptions || { emitError: true };

    let $headers = new HttpHeaders();
    $headers = $headers.append("Content-Type", ["application/json"]);

    if (Action != null) {
      $headers = $headers.append("Action", Action);
    }

    if (Version != null) {
      $headers = $headers.append("Version", Version);
    }

    if (xAmzContentSha256 != null) {
      $headers = $headers.append("X-Amz-Content-Sha256", xAmzContentSha256);
    }

    if (xAmzDate != null) {
      $headers = $headers.append("X-Amz-Date", xAmzDate);
    }

    if (xAmzAlgorithm != null) {
      $headers = $headers.append("X-Amz-Algorithm", xAmzAlgorithm);
    }

    if (xAmzCredential != null) {
      $headers = $headers.append("X-Amz-Credential", xAmzCredential);
    }

    if (xAmzSecurityToken != null) {
      $headers = $headers.append("X-Amz-Security-Token", xAmzSecurityToken);
    }

    if (xAmzSignature != null) {
      $headers = $headers.append("X-Amz-Signature", xAmzSignature);
    }

    if (xAmzSignedheaders != null) {
      $headers = $headers.append("X-Amz-SignedHeaders", xAmzSignedheaders);
    }

    const $url: string = this.ListUsersURL(MaxResults, NextToken);
    const $options = {
      headers: $headers,
      responseType: "json" as "json",
      withCredentials: true // enable CORS
    };
    const observable = this.http.post<ListUsersResponse>($url, body, $options);

    const ret = new Subject<ListUsersResponse>();
    observable.subscribe(
      (response: ListUsersResponse) => {
        console.info(`POST:${$url}`, response, $reqOptions);

        ret.next(ListUsersResponse.parse(response));
        ret.complete();
      },
      (response: HttpErrorResponse) => {
        console.error(`POST:${$url}`, response, $reqOptions);
        response.error.status = response.error.status || response.status;
        const error = CommonException.parse(response.error);

        ret.error(error);
        ret.complete();

        // notify global error handler
        if ($reqOptions.emitError) {
          this.onError.next(error);
        }
      }
    );

    return ret;
  }

  // source: aws.workmail.yaml
  RegisterToWorkMailVerb: string = "POST";
  RegisterToWorkMailURI: string = "/#RegisterToWorkMail";

  RegisterToWorkMailURL(): string {
    const $url = this.getFullURL(this.RegisterToWorkMailURI);

    return $url + "?";
  }

  RegisterToWorkMail(
    Action: string,
    Version: string,
    xAmzContentSha256: string,
    xAmzDate: string,
    xAmzAlgorithm: string,
    xAmzCredential: string,
    xAmzSecurityToken: string,
    xAmzSignature: string,
    xAmzSignedheaders: string,
    body: RegisterToWorkMailRequest,
    $reqOptions: RequestOptions = null
  ): Subject<RegisterToWorkMailResponse> {
    $reqOptions = $reqOptions || { emitError: true };

    let $headers = new HttpHeaders();
    $headers = $headers.append("Content-Type", ["application/json"]);

    if (Action != null) {
      $headers = $headers.append("Action", Action);
    }

    if (Version != null) {
      $headers = $headers.append("Version", Version);
    }

    if (xAmzContentSha256 != null) {
      $headers = $headers.append("X-Amz-Content-Sha256", xAmzContentSha256);
    }

    if (xAmzDate != null) {
      $headers = $headers.append("X-Amz-Date", xAmzDate);
    }

    if (xAmzAlgorithm != null) {
      $headers = $headers.append("X-Amz-Algorithm", xAmzAlgorithm);
    }

    if (xAmzCredential != null) {
      $headers = $headers.append("X-Amz-Credential", xAmzCredential);
    }

    if (xAmzSecurityToken != null) {
      $headers = $headers.append("X-Amz-Security-Token", xAmzSecurityToken);
    }

    if (xAmzSignature != null) {
      $headers = $headers.append("X-Amz-Signature", xAmzSignature);
    }

    if (xAmzSignedheaders != null) {
      $headers = $headers.append("X-Amz-SignedHeaders", xAmzSignedheaders);
    }

    const $url: string = this.RegisterToWorkMailURL();
    const $options = {
      headers: $headers,
      responseType: "json" as "json",
      withCredentials: true // enable CORS
    };
    const observable = this.http.post<RegisterToWorkMailResponse>(
      $url,
      body,
      $options
    );

    const ret = new Subject<RegisterToWorkMailResponse>();
    observable.subscribe(
      (response: RegisterToWorkMailResponse) => {
        console.info(`POST:${$url}`, response, $reqOptions);

        ret.next(RegisterToWorkMailResponse.parse(response));
        ret.complete();
      },
      (response: HttpErrorResponse) => {
        console.error(`POST:${$url}`, response, $reqOptions);
        response.error.status = response.error.status || response.status;
        const error = CommonException.parse(response.error);

        ret.error(error);
        ret.complete();

        // notify global error handler
        if ($reqOptions.emitError) {
          this.onError.next(error);
        }
      }
    );

    return ret;
  }

  // source: aws.workmail.yaml
  ResetPasswordVerb: string = "POST";
  ResetPasswordURI: string = "/#ResetPassword";

  ResetPasswordURL(): string {
    const $url = this.getFullURL(this.ResetPasswordURI);

    return $url + "?";
  }

  ResetPassword(
    Action: string,
    Version: string,
    xAmzContentSha256: string,
    xAmzDate: string,
    xAmzAlgorithm: string,
    xAmzCredential: string,
    xAmzSecurityToken: string,
    xAmzSignature: string,
    xAmzSignedheaders: string,
    body: ResetPasswordRequest,
    $reqOptions: RequestOptions = null
  ): Subject<ResetPasswordResponse> {
    $reqOptions = $reqOptions || { emitError: true };

    let $headers = new HttpHeaders();
    $headers = $headers.append("Content-Type", ["application/json"]);

    if (Action != null) {
      $headers = $headers.append("Action", Action);
    }

    if (Version != null) {
      $headers = $headers.append("Version", Version);
    }

    if (xAmzContentSha256 != null) {
      $headers = $headers.append("X-Amz-Content-Sha256", xAmzContentSha256);
    }

    if (xAmzDate != null) {
      $headers = $headers.append("X-Amz-Date", xAmzDate);
    }

    if (xAmzAlgorithm != null) {
      $headers = $headers.append("X-Amz-Algorithm", xAmzAlgorithm);
    }

    if (xAmzCredential != null) {
      $headers = $headers.append("X-Amz-Credential", xAmzCredential);
    }

    if (xAmzSecurityToken != null) {
      $headers = $headers.append("X-Amz-Security-Token", xAmzSecurityToken);
    }

    if (xAmzSignature != null) {
      $headers = $headers.append("X-Amz-Signature", xAmzSignature);
    }

    if (xAmzSignedheaders != null) {
      $headers = $headers.append("X-Amz-SignedHeaders", xAmzSignedheaders);
    }

    const $url: string = this.ResetPasswordURL();
    const $options = {
      headers: $headers,
      responseType: "json" as "json",
      withCredentials: true // enable CORS
    };
    const observable = this.http.post<ResetPasswordResponse>(
      $url,
      body,
      $options
    );

    const ret = new Subject<ResetPasswordResponse>();
    observable.subscribe(
      (response: ResetPasswordResponse) => {
        console.info(`POST:${$url}`, response, $reqOptions);

        ret.next(ResetPasswordResponse.parse(response));
        ret.complete();
      },
      (response: HttpErrorResponse) => {
        console.error(`POST:${$url}`, response, $reqOptions);
        response.error.status = response.error.status || response.status;
        const error = CommonException.parse(response.error);

        ret.error(error);
        ret.complete();

        // notify global error handler
        if ($reqOptions.emitError) {
          this.onError.next(error);
        }
      }
    );

    return ret;
  }

  // source: aws.workmail.yaml
  UpdatePrimaryEmailAddressVerb: string = "POST";
  UpdatePrimaryEmailAddressURI: string = "/#UpdatePrimaryEmailAddress";

  UpdatePrimaryEmailAddressURL(): string {
    const $url = this.getFullURL(this.UpdatePrimaryEmailAddressURI);

    return $url + "?";
  }

  UpdatePrimaryEmailAddress(
    Action: string,
    Version: string,
    xAmzContentSha256: string,
    xAmzDate: string,
    xAmzAlgorithm: string,
    xAmzCredential: string,
    xAmzSecurityToken: string,
    xAmzSignature: string,
    xAmzSignedheaders: string,
    body: UpdatePrimaryEmailAddressRequest,
    $reqOptions: RequestOptions = null
  ): Subject<UpdatePrimaryEmailAddressResponse> {
    $reqOptions = $reqOptions || { emitError: true };

    let $headers = new HttpHeaders();
    $headers = $headers.append("Content-Type", ["application/json"]);

    if (Action != null) {
      $headers = $headers.append("Action", Action);
    }

    if (Version != null) {
      $headers = $headers.append("Version", Version);
    }

    if (xAmzContentSha256 != null) {
      $headers = $headers.append("X-Amz-Content-Sha256", xAmzContentSha256);
    }

    if (xAmzDate != null) {
      $headers = $headers.append("X-Amz-Date", xAmzDate);
    }

    if (xAmzAlgorithm != null) {
      $headers = $headers.append("X-Amz-Algorithm", xAmzAlgorithm);
    }

    if (xAmzCredential != null) {
      $headers = $headers.append("X-Amz-Credential", xAmzCredential);
    }

    if (xAmzSecurityToken != null) {
      $headers = $headers.append("X-Amz-Security-Token", xAmzSecurityToken);
    }

    if (xAmzSignature != null) {
      $headers = $headers.append("X-Amz-Signature", xAmzSignature);
    }

    if (xAmzSignedheaders != null) {
      $headers = $headers.append("X-Amz-SignedHeaders", xAmzSignedheaders);
    }

    const $url: string = this.UpdatePrimaryEmailAddressURL();
    const $options = {
      headers: $headers,
      responseType: "json" as "json",
      withCredentials: true // enable CORS
    };
    const observable = this.http.post<UpdatePrimaryEmailAddressResponse>(
      $url,
      body,
      $options
    );

    const ret = new Subject<UpdatePrimaryEmailAddressResponse>();
    observable.subscribe(
      (response: UpdatePrimaryEmailAddressResponse) => {
        console.info(`POST:${$url}`, response, $reqOptions);

        ret.next(UpdatePrimaryEmailAddressResponse.parse(response));
        ret.complete();
      },
      (response: HttpErrorResponse) => {
        console.error(`POST:${$url}`, response, $reqOptions);
        response.error.status = response.error.status || response.status;
        const error = CommonException.parse(response.error);

        ret.error(error);
        ret.complete();

        // notify global error handler
        if ($reqOptions.emitError) {
          this.onError.next(error);
        }
      }
    );

    return ret;
  }

  // source: aws.workmail.yaml
  UpdateResourceVerb: string = "POST";
  UpdateResourceURI: string = "/#UpdateResource";

  UpdateResourceURL(): string {
    const $url = this.getFullURL(this.UpdateResourceURI);

    return $url + "?";
  }

  UpdateResource(
    Action: string,
    Version: string,
    xAmzContentSha256: string,
    xAmzDate: string,
    xAmzAlgorithm: string,
    xAmzCredential: string,
    xAmzSecurityToken: string,
    xAmzSignature: string,
    xAmzSignedheaders: string,
    body: UpdateResourceRequest,
    $reqOptions: RequestOptions = null
  ): Subject<UpdateResourceResponse> {
    $reqOptions = $reqOptions || { emitError: true };

    let $headers = new HttpHeaders();
    $headers = $headers.append("Content-Type", ["application/json"]);

    if (Action != null) {
      $headers = $headers.append("Action", Action);
    }

    if (Version != null) {
      $headers = $headers.append("Version", Version);
    }

    if (xAmzContentSha256 != null) {
      $headers = $headers.append("X-Amz-Content-Sha256", xAmzContentSha256);
    }

    if (xAmzDate != null) {
      $headers = $headers.append("X-Amz-Date", xAmzDate);
    }

    if (xAmzAlgorithm != null) {
      $headers = $headers.append("X-Amz-Algorithm", xAmzAlgorithm);
    }

    if (xAmzCredential != null) {
      $headers = $headers.append("X-Amz-Credential", xAmzCredential);
    }

    if (xAmzSecurityToken != null) {
      $headers = $headers.append("X-Amz-Security-Token", xAmzSecurityToken);
    }

    if (xAmzSignature != null) {
      $headers = $headers.append("X-Amz-Signature", xAmzSignature);
    }

    if (xAmzSignedheaders != null) {
      $headers = $headers.append("X-Amz-SignedHeaders", xAmzSignedheaders);
    }

    const $url: string = this.UpdateResourceURL();
    const $options = {
      headers: $headers,
      responseType: "json" as "json",
      withCredentials: true // enable CORS
    };
    const observable = this.http.post<UpdateResourceResponse>(
      $url,
      body,
      $options
    );

    const ret = new Subject<UpdateResourceResponse>();
    observable.subscribe(
      (response: UpdateResourceResponse) => {
        console.info(`POST:${$url}`, response, $reqOptions);

        ret.next(UpdateResourceResponse.parse(response));
        ret.complete();
      },
      (response: HttpErrorResponse) => {
        console.error(`POST:${$url}`, response, $reqOptions);
        response.error.status = response.error.status || response.status;
        const error = CommonException.parse(response.error);

        ret.error(error);
        ret.complete();

        // notify global error handler
        if ($reqOptions.emitError) {
          this.onError.next(error);
        }
      }
    );

    return ret;
  }
}
